<?php
/**
 * SystemInfoCustomizingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SeaTable\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Account Operations: System admin
 *
 * The official SeaTable API Reference (OpenAPI 3.0).
 *
 * The version of the OpenAPI document: 4.3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SeaTable\Client\SysAdmin;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SeaTable\Client\ApiException;
use SeaTable\Client\Configuration;
use SeaTable\Client\HeaderSelector;
use SeaTable\Client\ObjectSerializer;

/**
 * SystemInfoCustomizingApi Class Doc Comment
 *
 * @category Class
 * @package  SeaTable\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SystemInfoCustomizingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getSystemInformation' => [
            'application/json',
        ],
        'updateFavicon' => [
            'multipart/form-data',
        ],
        'updateGeneralSettings' => [
            'multipart/form-data',
        ],
        'updateLoginBackgroundImage' => [
            'multipart/form-data',
        ],
        'updateLogo' => [
            'multipart/form-data',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getSystemInformation
     *
     * Get system information
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemInformation'] to see the possible values for this operation
     *
     * @throws \SeaTable\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getSystemInformation(string $contentType = self::contentTypes['getSystemInformation'][0])
    {
        list($response) = $this->getSystemInformationWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getSystemInformationWithHttpInfo
     *
     * Get system information
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemInformation'] to see the possible values for this operation
     *
     * @throws \SeaTable\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSystemInformationWithHttpInfo(string $contentType = self::contentTypes['getSystemInformation'][0])
    {
        $request = $this->getSystemInformationRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSystemInformationAsync
     *
     * Get system information
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSystemInformationAsync(string $contentType = self::contentTypes['getSystemInformation'][0])
    {
        return $this->getSystemInformationAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSystemInformationAsyncWithHttpInfo
     *
     * Get system information
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSystemInformationAsyncWithHttpInfo(string $contentType = self::contentTypes['getSystemInformation'][0])
    {
        $returnType = 'object';
        $request = $this->getSystemInformationRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSystemInformation'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSystemInformationRequest(string $contentType = self::contentTypes['getSystemInformation'][0])
    {


        $resourcePath = '/api/v2.1/admin/sysinfo/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFavicon
     *
     * Update Favicon
     *
     * @param  \SplFileObject $favicon The path and filename of the image file of your favicon. (optional)
     * @param  bool $with_notify Leave this param as its default (&#x60;false&#x60;) to upload your favicon, and use this param as &#x60;true&#x60; to upload a favicon with a notification sign. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFavicon'] to see the possible values for this operation
     *
     * @throws \SeaTable\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function updateFavicon($favicon = null, $with_notify = null, string $contentType = self::contentTypes['updateFavicon'][0])
    {
        list($response) = $this->updateFaviconWithHttpInfo($favicon, $with_notify, $contentType);
        return $response;
    }

    /**
     * Operation updateFaviconWithHttpInfo
     *
     * Update Favicon
     *
     * @param  \SplFileObject $favicon The path and filename of the image file of your favicon. (optional)
     * @param  bool $with_notify Leave this param as its default (&#x60;false&#x60;) to upload your favicon, and use this param as &#x60;true&#x60; to upload a favicon with a notification sign. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFavicon'] to see the possible values for this operation
     *
     * @throws \SeaTable\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFaviconWithHttpInfo($favicon = null, $with_notify = null, string $contentType = self::contentTypes['updateFavicon'][0])
    {
        $request = $this->updateFaviconRequest($favicon, $with_notify, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFaviconAsync
     *
     * Update Favicon
     *
     * @param  \SplFileObject $favicon The path and filename of the image file of your favicon. (optional)
     * @param  bool $with_notify Leave this param as its default (&#x60;false&#x60;) to upload your favicon, and use this param as &#x60;true&#x60; to upload a favicon with a notification sign. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFavicon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFaviconAsync($favicon = null, $with_notify = null, string $contentType = self::contentTypes['updateFavicon'][0])
    {
        return $this->updateFaviconAsyncWithHttpInfo($favicon, $with_notify, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFaviconAsyncWithHttpInfo
     *
     * Update Favicon
     *
     * @param  \SplFileObject $favicon The path and filename of the image file of your favicon. (optional)
     * @param  bool $with_notify Leave this param as its default (&#x60;false&#x60;) to upload your favicon, and use this param as &#x60;true&#x60; to upload a favicon with a notification sign. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFavicon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFaviconAsyncWithHttpInfo($favicon = null, $with_notify = null, string $contentType = self::contentTypes['updateFavicon'][0])
    {
        $returnType = 'object';
        $request = $this->updateFaviconRequest($favicon, $with_notify, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFavicon'
     *
     * @param  \SplFileObject $favicon The path and filename of the image file of your favicon. (optional)
     * @param  bool $with_notify Leave this param as its default (&#x60;false&#x60;) to upload your favicon, and use this param as &#x60;true&#x60; to upload a favicon with a notification sign. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFavicon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFaviconRequest($favicon = null, $with_notify = null, string $contentType = self::contentTypes['updateFavicon'][0])
    {




        $resourcePath = '/api/v2.1/admin/favicon/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($favicon !== null) {
            $multipart = true;
            $formParams['favicon'] = [];
            $paramFiles = is_array($favicon) ? $favicon : [$favicon];
            foreach ($paramFiles as $paramFile) {
                $formParams['favicon'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($with_notify !== null) {
            $formParams['with_notify'] = ObjectSerializer::toFormValue($with_notify);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateGeneralSettings
     *
     * Update General Settings
     *
     * @param  string $site_title The title of your SeaTable web interface, like appeared on the browser tab. Optional. Default value is &#x60;SeaTable Private&#x60;. (optional)
     * @param  string $site_name The name of your site, like appeared in the notification emails. Optional. Default value is &#x60;SeaTable&#x60;. (optional)
     * @param  int $enable_branding_css If a custom CSS should be used. Optional, &#x60;0&#x60; by default. If set to &#x60;1&#x60;, paste your CSS into the param &#x60;CUSTOM_CSS&#x60;. (optional)
     * @param  string $custom_css The content of your custom CSS. Optional. Empty by default. (optional)
     * @param  int $activate_after_registration If users should be automatically activated after the registration. Optional, &#x60;1&#x60; by default. If &#x60;0&#x60;, then the user need to be activated by the administrator or via the activation email. (optional)
     * @param  int $registration_send_mail If an activation email should be sent after the user has registered. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $login_remember_days How many default days a user could be kept signed in. Optional, &#x60;7&#x60; by default. (optional)
     * @param  int $login_attempt_limit The maximum number of failed login attempts before showing CAPTCHA. Optional, &#x60;5&#x60; by default. (optional)
     * @param  int $freeze_user_on_login_failed If the user&#39;s account should be frozen when they exceed the login attempts limit. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $user_strong_password_required Force the users to use a strong password when signing up or changing password. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $force_password_change Force newly added users to change their password, or when the admin resets their password. Optional, &#x60;1&#x60; by default. (optional)
     * @param  int $user_password_min_length The minimum length of user passwords. Optional, &#x60;6&#x60; by default. (optional)
     * @param  int $user_password_strength_level The level (&#x60;1&#x60;-&#x60;4&#x60;) of a password&#39;s strength. For example, &#x60;3&#x60; means password must have at least 3 of the following: a number, an upper letter, a lower letter and a special symbol. Optional, &#x60;3&#x60; by default. (optional)
     * @param  int $enable_two_factor_auth If two factor authentication should be activated for the system. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $enable_signup If registration on the web interface is allowed. Optional, &#x60;0&#x60; by default. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGeneralSettings'] to see the possible values for this operation
     *
     * @throws \SeaTable\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function updateGeneralSettings($site_title = null, $site_name = null, $enable_branding_css = null, $custom_css = null, $activate_after_registration = null, $registration_send_mail = null, $login_remember_days = null, $login_attempt_limit = null, $freeze_user_on_login_failed = null, $user_strong_password_required = null, $force_password_change = null, $user_password_min_length = null, $user_password_strength_level = null, $enable_two_factor_auth = null, $enable_signup = null, string $contentType = self::contentTypes['updateGeneralSettings'][0])
    {
        list($response) = $this->updateGeneralSettingsWithHttpInfo($site_title, $site_name, $enable_branding_css, $custom_css, $activate_after_registration, $registration_send_mail, $login_remember_days, $login_attempt_limit, $freeze_user_on_login_failed, $user_strong_password_required, $force_password_change, $user_password_min_length, $user_password_strength_level, $enable_two_factor_auth, $enable_signup, $contentType);
        return $response;
    }

    /**
     * Operation updateGeneralSettingsWithHttpInfo
     *
     * Update General Settings
     *
     * @param  string $site_title The title of your SeaTable web interface, like appeared on the browser tab. Optional. Default value is &#x60;SeaTable Private&#x60;. (optional)
     * @param  string $site_name The name of your site, like appeared in the notification emails. Optional. Default value is &#x60;SeaTable&#x60;. (optional)
     * @param  int $enable_branding_css If a custom CSS should be used. Optional, &#x60;0&#x60; by default. If set to &#x60;1&#x60;, paste your CSS into the param &#x60;CUSTOM_CSS&#x60;. (optional)
     * @param  string $custom_css The content of your custom CSS. Optional. Empty by default. (optional)
     * @param  int $activate_after_registration If users should be automatically activated after the registration. Optional, &#x60;1&#x60; by default. If &#x60;0&#x60;, then the user need to be activated by the administrator or via the activation email. (optional)
     * @param  int $registration_send_mail If an activation email should be sent after the user has registered. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $login_remember_days How many default days a user could be kept signed in. Optional, &#x60;7&#x60; by default. (optional)
     * @param  int $login_attempt_limit The maximum number of failed login attempts before showing CAPTCHA. Optional, &#x60;5&#x60; by default. (optional)
     * @param  int $freeze_user_on_login_failed If the user&#39;s account should be frozen when they exceed the login attempts limit. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $user_strong_password_required Force the users to use a strong password when signing up or changing password. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $force_password_change Force newly added users to change their password, or when the admin resets their password. Optional, &#x60;1&#x60; by default. (optional)
     * @param  int $user_password_min_length The minimum length of user passwords. Optional, &#x60;6&#x60; by default. (optional)
     * @param  int $user_password_strength_level The level (&#x60;1&#x60;-&#x60;4&#x60;) of a password&#39;s strength. For example, &#x60;3&#x60; means password must have at least 3 of the following: a number, an upper letter, a lower letter and a special symbol. Optional, &#x60;3&#x60; by default. (optional)
     * @param  int $enable_two_factor_auth If two factor authentication should be activated for the system. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $enable_signup If registration on the web interface is allowed. Optional, &#x60;0&#x60; by default. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGeneralSettings'] to see the possible values for this operation
     *
     * @throws \SeaTable\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGeneralSettingsWithHttpInfo($site_title = null, $site_name = null, $enable_branding_css = null, $custom_css = null, $activate_after_registration = null, $registration_send_mail = null, $login_remember_days = null, $login_attempt_limit = null, $freeze_user_on_login_failed = null, $user_strong_password_required = null, $force_password_change = null, $user_password_min_length = null, $user_password_strength_level = null, $enable_two_factor_auth = null, $enable_signup = null, string $contentType = self::contentTypes['updateGeneralSettings'][0])
    {
        $request = $this->updateGeneralSettingsRequest($site_title, $site_name, $enable_branding_css, $custom_css, $activate_after_registration, $registration_send_mail, $login_remember_days, $login_attempt_limit, $freeze_user_on_login_failed, $user_strong_password_required, $force_password_change, $user_password_min_length, $user_password_strength_level, $enable_two_factor_auth, $enable_signup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateGeneralSettingsAsync
     *
     * Update General Settings
     *
     * @param  string $site_title The title of your SeaTable web interface, like appeared on the browser tab. Optional. Default value is &#x60;SeaTable Private&#x60;. (optional)
     * @param  string $site_name The name of your site, like appeared in the notification emails. Optional. Default value is &#x60;SeaTable&#x60;. (optional)
     * @param  int $enable_branding_css If a custom CSS should be used. Optional, &#x60;0&#x60; by default. If set to &#x60;1&#x60;, paste your CSS into the param &#x60;CUSTOM_CSS&#x60;. (optional)
     * @param  string $custom_css The content of your custom CSS. Optional. Empty by default. (optional)
     * @param  int $activate_after_registration If users should be automatically activated after the registration. Optional, &#x60;1&#x60; by default. If &#x60;0&#x60;, then the user need to be activated by the administrator or via the activation email. (optional)
     * @param  int $registration_send_mail If an activation email should be sent after the user has registered. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $login_remember_days How many default days a user could be kept signed in. Optional, &#x60;7&#x60; by default. (optional)
     * @param  int $login_attempt_limit The maximum number of failed login attempts before showing CAPTCHA. Optional, &#x60;5&#x60; by default. (optional)
     * @param  int $freeze_user_on_login_failed If the user&#39;s account should be frozen when they exceed the login attempts limit. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $user_strong_password_required Force the users to use a strong password when signing up or changing password. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $force_password_change Force newly added users to change their password, or when the admin resets their password. Optional, &#x60;1&#x60; by default. (optional)
     * @param  int $user_password_min_length The minimum length of user passwords. Optional, &#x60;6&#x60; by default. (optional)
     * @param  int $user_password_strength_level The level (&#x60;1&#x60;-&#x60;4&#x60;) of a password&#39;s strength. For example, &#x60;3&#x60; means password must have at least 3 of the following: a number, an upper letter, a lower letter and a special symbol. Optional, &#x60;3&#x60; by default. (optional)
     * @param  int $enable_two_factor_auth If two factor authentication should be activated for the system. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $enable_signup If registration on the web interface is allowed. Optional, &#x60;0&#x60; by default. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGeneralSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGeneralSettingsAsync($site_title = null, $site_name = null, $enable_branding_css = null, $custom_css = null, $activate_after_registration = null, $registration_send_mail = null, $login_remember_days = null, $login_attempt_limit = null, $freeze_user_on_login_failed = null, $user_strong_password_required = null, $force_password_change = null, $user_password_min_length = null, $user_password_strength_level = null, $enable_two_factor_auth = null, $enable_signup = null, string $contentType = self::contentTypes['updateGeneralSettings'][0])
    {
        return $this->updateGeneralSettingsAsyncWithHttpInfo($site_title, $site_name, $enable_branding_css, $custom_css, $activate_after_registration, $registration_send_mail, $login_remember_days, $login_attempt_limit, $freeze_user_on_login_failed, $user_strong_password_required, $force_password_change, $user_password_min_length, $user_password_strength_level, $enable_two_factor_auth, $enable_signup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateGeneralSettingsAsyncWithHttpInfo
     *
     * Update General Settings
     *
     * @param  string $site_title The title of your SeaTable web interface, like appeared on the browser tab. Optional. Default value is &#x60;SeaTable Private&#x60;. (optional)
     * @param  string $site_name The name of your site, like appeared in the notification emails. Optional. Default value is &#x60;SeaTable&#x60;. (optional)
     * @param  int $enable_branding_css If a custom CSS should be used. Optional, &#x60;0&#x60; by default. If set to &#x60;1&#x60;, paste your CSS into the param &#x60;CUSTOM_CSS&#x60;. (optional)
     * @param  string $custom_css The content of your custom CSS. Optional. Empty by default. (optional)
     * @param  int $activate_after_registration If users should be automatically activated after the registration. Optional, &#x60;1&#x60; by default. If &#x60;0&#x60;, then the user need to be activated by the administrator or via the activation email. (optional)
     * @param  int $registration_send_mail If an activation email should be sent after the user has registered. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $login_remember_days How many default days a user could be kept signed in. Optional, &#x60;7&#x60; by default. (optional)
     * @param  int $login_attempt_limit The maximum number of failed login attempts before showing CAPTCHA. Optional, &#x60;5&#x60; by default. (optional)
     * @param  int $freeze_user_on_login_failed If the user&#39;s account should be frozen when they exceed the login attempts limit. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $user_strong_password_required Force the users to use a strong password when signing up or changing password. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $force_password_change Force newly added users to change their password, or when the admin resets their password. Optional, &#x60;1&#x60; by default. (optional)
     * @param  int $user_password_min_length The minimum length of user passwords. Optional, &#x60;6&#x60; by default. (optional)
     * @param  int $user_password_strength_level The level (&#x60;1&#x60;-&#x60;4&#x60;) of a password&#39;s strength. For example, &#x60;3&#x60; means password must have at least 3 of the following: a number, an upper letter, a lower letter and a special symbol. Optional, &#x60;3&#x60; by default. (optional)
     * @param  int $enable_two_factor_auth If two factor authentication should be activated for the system. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $enable_signup If registration on the web interface is allowed. Optional, &#x60;0&#x60; by default. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGeneralSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGeneralSettingsAsyncWithHttpInfo($site_title = null, $site_name = null, $enable_branding_css = null, $custom_css = null, $activate_after_registration = null, $registration_send_mail = null, $login_remember_days = null, $login_attempt_limit = null, $freeze_user_on_login_failed = null, $user_strong_password_required = null, $force_password_change = null, $user_password_min_length = null, $user_password_strength_level = null, $enable_two_factor_auth = null, $enable_signup = null, string $contentType = self::contentTypes['updateGeneralSettings'][0])
    {
        $returnType = 'object';
        $request = $this->updateGeneralSettingsRequest($site_title, $site_name, $enable_branding_css, $custom_css, $activate_after_registration, $registration_send_mail, $login_remember_days, $login_attempt_limit, $freeze_user_on_login_failed, $user_strong_password_required, $force_password_change, $user_password_min_length, $user_password_strength_level, $enable_two_factor_auth, $enable_signup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateGeneralSettings'
     *
     * @param  string $site_title The title of your SeaTable web interface, like appeared on the browser tab. Optional. Default value is &#x60;SeaTable Private&#x60;. (optional)
     * @param  string $site_name The name of your site, like appeared in the notification emails. Optional. Default value is &#x60;SeaTable&#x60;. (optional)
     * @param  int $enable_branding_css If a custom CSS should be used. Optional, &#x60;0&#x60; by default. If set to &#x60;1&#x60;, paste your CSS into the param &#x60;CUSTOM_CSS&#x60;. (optional)
     * @param  string $custom_css The content of your custom CSS. Optional. Empty by default. (optional)
     * @param  int $activate_after_registration If users should be automatically activated after the registration. Optional, &#x60;1&#x60; by default. If &#x60;0&#x60;, then the user need to be activated by the administrator or via the activation email. (optional)
     * @param  int $registration_send_mail If an activation email should be sent after the user has registered. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $login_remember_days How many default days a user could be kept signed in. Optional, &#x60;7&#x60; by default. (optional)
     * @param  int $login_attempt_limit The maximum number of failed login attempts before showing CAPTCHA. Optional, &#x60;5&#x60; by default. (optional)
     * @param  int $freeze_user_on_login_failed If the user&#39;s account should be frozen when they exceed the login attempts limit. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $user_strong_password_required Force the users to use a strong password when signing up or changing password. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $force_password_change Force newly added users to change their password, or when the admin resets their password. Optional, &#x60;1&#x60; by default. (optional)
     * @param  int $user_password_min_length The minimum length of user passwords. Optional, &#x60;6&#x60; by default. (optional)
     * @param  int $user_password_strength_level The level (&#x60;1&#x60;-&#x60;4&#x60;) of a password&#39;s strength. For example, &#x60;3&#x60; means password must have at least 3 of the following: a number, an upper letter, a lower letter and a special symbol. Optional, &#x60;3&#x60; by default. (optional)
     * @param  int $enable_two_factor_auth If two factor authentication should be activated for the system. Optional, &#x60;0&#x60; by default. (optional)
     * @param  int $enable_signup If registration on the web interface is allowed. Optional, &#x60;0&#x60; by default. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGeneralSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateGeneralSettingsRequest($site_title = null, $site_name = null, $enable_branding_css = null, $custom_css = null, $activate_after_registration = null, $registration_send_mail = null, $login_remember_days = null, $login_attempt_limit = null, $freeze_user_on_login_failed = null, $user_strong_password_required = null, $force_password_change = null, $user_password_min_length = null, $user_password_strength_level = null, $enable_two_factor_auth = null, $enable_signup = null, string $contentType = self::contentTypes['updateGeneralSettings'][0])
    {

















        $resourcePath = '/api/v2.1/admin/web-settings/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($site_title !== null) {
            $formParams['SITE_TITLE'] = ObjectSerializer::toFormValue($site_title);
        }
        // form params
        if ($site_name !== null) {
            $formParams['SITE_NAME'] = ObjectSerializer::toFormValue($site_name);
        }
        // form params
        if ($enable_branding_css !== null) {
            $formParams['ENABLE_BRANDING_CSS'] = ObjectSerializer::toFormValue($enable_branding_css);
        }
        // form params
        if ($custom_css !== null) {
            $formParams['CUSTOM_CSS'] = ObjectSerializer::toFormValue($custom_css);
        }
        // form params
        if ($activate_after_registration !== null) {
            $formParams['ACTIVATE_AFTER_REGISTRATION'] = ObjectSerializer::toFormValue($activate_after_registration);
        }
        // form params
        if ($registration_send_mail !== null) {
            $formParams['REGISTRATION_SEND_MAIL'] = ObjectSerializer::toFormValue($registration_send_mail);
        }
        // form params
        if ($login_remember_days !== null) {
            $formParams['LOGIN_REMEMBER_DAYS'] = ObjectSerializer::toFormValue($login_remember_days);
        }
        // form params
        if ($login_attempt_limit !== null) {
            $formParams['LOGIN_ATTEMPT_LIMIT'] = ObjectSerializer::toFormValue($login_attempt_limit);
        }
        // form params
        if ($freeze_user_on_login_failed !== null) {
            $formParams['FREEZE_USER_ON_LOGIN_FAILED'] = ObjectSerializer::toFormValue($freeze_user_on_login_failed);
        }
        // form params
        if ($user_strong_password_required !== null) {
            $formParams['USER_STRONG_PASSWORD_REQUIRED'] = ObjectSerializer::toFormValue($user_strong_password_required);
        }
        // form params
        if ($force_password_change !== null) {
            $formParams['FORCE_PASSWORD_CHANGE'] = ObjectSerializer::toFormValue($force_password_change);
        }
        // form params
        if ($user_password_min_length !== null) {
            $formParams['USER_PASSWORD_MIN_LENGTH'] = ObjectSerializer::toFormValue($user_password_min_length);
        }
        // form params
        if ($user_password_strength_level !== null) {
            $formParams['USER_PASSWORD_STRENGTH_LEVEL'] = ObjectSerializer::toFormValue($user_password_strength_level);
        }
        // form params
        if ($enable_two_factor_auth !== null) {
            $formParams['ENABLE_TWO_FACTOR_AUTH'] = ObjectSerializer::toFormValue($enable_two_factor_auth);
        }
        // form params
        if ($enable_signup !== null) {
            $formParams['ENABLE_SIGNUP'] = ObjectSerializer::toFormValue($enable_signup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLoginBackgroundImage
     *
     * Update Login Background Image
     *
     * @param  \SplFileObject $login_bg_image The path and filename of the background image. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoginBackgroundImage'] to see the possible values for this operation
     *
     * @throws \SeaTable\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function updateLoginBackgroundImage($login_bg_image = null, string $contentType = self::contentTypes['updateLoginBackgroundImage'][0])
    {
        list($response) = $this->updateLoginBackgroundImageWithHttpInfo($login_bg_image, $contentType);
        return $response;
    }

    /**
     * Operation updateLoginBackgroundImageWithHttpInfo
     *
     * Update Login Background Image
     *
     * @param  \SplFileObject $login_bg_image The path and filename of the background image. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoginBackgroundImage'] to see the possible values for this operation
     *
     * @throws \SeaTable\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLoginBackgroundImageWithHttpInfo($login_bg_image = null, string $contentType = self::contentTypes['updateLoginBackgroundImage'][0])
    {
        $request = $this->updateLoginBackgroundImageRequest($login_bg_image, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLoginBackgroundImageAsync
     *
     * Update Login Background Image
     *
     * @param  \SplFileObject $login_bg_image The path and filename of the background image. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoginBackgroundImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLoginBackgroundImageAsync($login_bg_image = null, string $contentType = self::contentTypes['updateLoginBackgroundImage'][0])
    {
        return $this->updateLoginBackgroundImageAsyncWithHttpInfo($login_bg_image, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLoginBackgroundImageAsyncWithHttpInfo
     *
     * Update Login Background Image
     *
     * @param  \SplFileObject $login_bg_image The path and filename of the background image. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoginBackgroundImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLoginBackgroundImageAsyncWithHttpInfo($login_bg_image = null, string $contentType = self::contentTypes['updateLoginBackgroundImage'][0])
    {
        $returnType = 'object';
        $request = $this->updateLoginBackgroundImageRequest($login_bg_image, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLoginBackgroundImage'
     *
     * @param  \SplFileObject $login_bg_image The path and filename of the background image. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoginBackgroundImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLoginBackgroundImageRequest($login_bg_image = null, string $contentType = self::contentTypes['updateLoginBackgroundImage'][0])
    {



        $resourcePath = '/api/v2.1/admin/login-background-image/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($login_bg_image !== null) {
            $multipart = true;
            $formParams['login_bg_image'] = [];
            $paramFiles = is_array($login_bg_image) ? $login_bg_image : [$login_bg_image];
            foreach ($paramFiles as $paramFile) {
                $formParams['login_bg_image'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLogo
     *
     * Update Logo
     *
     * @param  \SplFileObject $logo The path and filename of the image file of your logo. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLogo'] to see the possible values for this operation
     *
     * @throws \SeaTable\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function updateLogo($logo = null, string $contentType = self::contentTypes['updateLogo'][0])
    {
        list($response) = $this->updateLogoWithHttpInfo($logo, $contentType);
        return $response;
    }

    /**
     * Operation updateLogoWithHttpInfo
     *
     * Update Logo
     *
     * @param  \SplFileObject $logo The path and filename of the image file of your logo. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLogo'] to see the possible values for this operation
     *
     * @throws \SeaTable\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLogoWithHttpInfo($logo = null, string $contentType = self::contentTypes['updateLogo'][0])
    {
        $request = $this->updateLogoRequest($logo, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLogoAsync
     *
     * Update Logo
     *
     * @param  \SplFileObject $logo The path and filename of the image file of your logo. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLogo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLogoAsync($logo = null, string $contentType = self::contentTypes['updateLogo'][0])
    {
        return $this->updateLogoAsyncWithHttpInfo($logo, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLogoAsyncWithHttpInfo
     *
     * Update Logo
     *
     * @param  \SplFileObject $logo The path and filename of the image file of your logo. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLogo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLogoAsyncWithHttpInfo($logo = null, string $contentType = self::contentTypes['updateLogo'][0])
    {
        $returnType = 'object';
        $request = $this->updateLogoRequest($logo, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLogo'
     *
     * @param  \SplFileObject $logo The path and filename of the image file of your logo. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLogo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLogoRequest($logo = null, string $contentType = self::contentTypes['updateLogo'][0])
    {



        $resourcePath = '/api/v2.1/admin/logo/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($logo !== null) {
            $multipart = true;
            $formParams['logo'] = [];
            $paramFiles = is_array($logo) ? $logo : [$logo];
            foreach ($paramFiles as $paramFile) {
                $formParams['logo'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
