{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"seatable-api-php \u00b6 PHP-bindings of the SeaTable API ( api.seatable.io ). Requirements Installation Upgrading PHP 7.2.5+ (deprecated, 7.4+ recommended) with the Curl and Json extension (see composer.json ). The SeaTable API installs as part of your project dependencies. It is available from Packagist for Composer : composer require seatable/seatable-api-php This project is with Semantic Versioning (2.0.0) . Please see the notes on upgrading , especially for upgrading from the SeaTableAPI.php single class/file and other very early versions (0.x). Usage \u00b6 Get Access to a Base \u00b6 SeaTable has additional authentication to access a specific base. The README.md presents two variants to obtain access. You normally either : Create a SeaTable API-Token for a specific base, the Base App API Token . Use your credentials, and later on provide the workspace_id and the name of the base to obtain an ( internal ) Base Access Token . Base App API Token Email+Password & Base Access Token <?php declare ( strict_types = 1 ); // setting up autoloader require_once __DIR__ . '/vendor/autoload.php' ; // use SeaTable api class use SeaTable\\SeaTableApi\\SeaTableApi ; // init and obtain base access token $seatable = new SeaTableApi ([ 'url' => 'https://cloud.seatable.io' , 'base_app_api_token' => '1d3303315348c6b566c44709d459b33b6bac5ad1' , 'base_app_name' => '(optional)' , ]); // start using the available api calls to edit the data inside a base // ... <?php declare ( strict_types = 1 ); // setting up autoloader require_once __DIR__ . '/vendor/autoload.php' ; // use SeaTable api class use SeaTable\\SeaTableApi\\SeaTableApi ; // init and obtain auth token $seatable = new SeaTableApi ([ 'url' => 'https://cloud.seatable.io' , 'user' => 'YOUR-EMAIL' , # required for variant 2. 'password' => 'YOUR-PASSWORD' ]); // get access with your credentials (by workspace-id and table-name) $seatable -> getBaseAccessToken ( $workspaceID = 1323 , $name = 'Project tracker' ); // start using the available api calls to edit the data inside a base // ... More connection options Please see Establish the Connection for an overview of all connection options, the previous examples are for getting started. If you want to get a feeling about the usage, please see the Examples section: Add a new Column to a Base Get Content from a Base Functions \u00b6 Admin Functions (User) \u00b6 sysAdminListUsers(int $page = 1, int $perPage = 25) sysAdminAddUser(string $email, string $name, string $password, string $role = 'default') sysAdminSearchUser(string $query) sysAdminUpdateUser(string $email, array $changes = []) sysAdminDeleteUser(string $email) Workspace Functions (Admin) \u00b6 updateBase(int $workspaceId, string $baseName, array $changes = []) copyBaseExternalLink(string $link, int $destinationWorkspaceId) Teammanagement Functions (Admin) \u00b6 Note On the webpage SeaTable always talks about teams . The technical term that is used within the API documentation and manual is organization (or org in short). sysAdminListTeams(int $page = 1, int $perPage = 25) sysAdminAddTeam(string $name, string $adminEmail, string $adminName, string $password, int $maxUser) sysAdminDeleteTeam(int $id) sysAdminUpdateTeam(int $id, array $changes = []) sysAdminListTeamUsers(int $id, int $page = 1, int $perPage = 25, bool $isStaff = false) sysAdminAddTeamUser(int $id, string $email, string $pass, string $name = null) sysAdminDeleteTeamUser(int $id, string $email) sysAdminListTeamGroups(int $id) sysAdminListTeamBases(int $id, int $page = 1, int $perPage = 25) Functions to Work with a Base (Table Data) \u00b6 listRows(string $tableName, string $viewName = null, bool $convertLinkId = false, string $orderBy = null, bool $direction = false, int $start = 0, int $limit = 1000) appendRow(string $tableName, array $row) getBaseMetadata() All Methods For the full list of functions, please see all public methods of the class \\SeaTable\\SeaTableApi\\SeaTableApi . More functions will be added in the future and the documentation improved. Common Mistakes \u00b6 There are two kind of Email-Addresses in SeaTable \u00b6 There are two kind of email-addresses in SeaTable. Please don't be confused with the property email . There are two email addresses in SeaTable. Let's have a look at the user object in SeaTable: { \"data\" : [ { \"email\" : \"1ef456ab715841cc81b145b2530c2904@auth.local\" , \"name\" : \"Jane Doe\" , \"contact_email\" : \"jane@example.com, ... } ], \" t o tal _cou nt \": 1 } SeaTable creates for every user a unique identifier in form of an email address in the form of 1ef456ab715841cc81b145b2530c2904@auth.local . This unique identifier is used by the API calls to identify a user like in deleteOrgUser() . On the other hand a user registers with an email address for SeaTable. In this example this email is jane@example.com . This is the contact_email and only relevant for the authentication.","title":"Overview"},{"location":"#seatable-api-php","text":"PHP-bindings of the SeaTable API ( api.seatable.io ). Requirements Installation Upgrading PHP 7.2.5+ (deprecated, 7.4+ recommended) with the Curl and Json extension (see composer.json ). The SeaTable API installs as part of your project dependencies. It is available from Packagist for Composer : composer require seatable/seatable-api-php This project is with Semantic Versioning (2.0.0) . Please see the notes on upgrading , especially for upgrading from the SeaTableAPI.php single class/file and other very early versions (0.x).","title":"seatable-api-php"},{"location":"#usage","text":"","title":"Usage"},{"location":"#get-access-to-a-base","text":"SeaTable has additional authentication to access a specific base. The README.md presents two variants to obtain access. You normally either : Create a SeaTable API-Token for a specific base, the Base App API Token . Use your credentials, and later on provide the workspace_id and the name of the base to obtain an ( internal ) Base Access Token . Base App API Token Email+Password & Base Access Token <?php declare ( strict_types = 1 ); // setting up autoloader require_once __DIR__ . '/vendor/autoload.php' ; // use SeaTable api class use SeaTable\\SeaTableApi\\SeaTableApi ; // init and obtain base access token $seatable = new SeaTableApi ([ 'url' => 'https://cloud.seatable.io' , 'base_app_api_token' => '1d3303315348c6b566c44709d459b33b6bac5ad1' , 'base_app_name' => '(optional)' , ]); // start using the available api calls to edit the data inside a base // ... <?php declare ( strict_types = 1 ); // setting up autoloader require_once __DIR__ . '/vendor/autoload.php' ; // use SeaTable api class use SeaTable\\SeaTableApi\\SeaTableApi ; // init and obtain auth token $seatable = new SeaTableApi ([ 'url' => 'https://cloud.seatable.io' , 'user' => 'YOUR-EMAIL' , # required for variant 2. 'password' => 'YOUR-PASSWORD' ]); // get access with your credentials (by workspace-id and table-name) $seatable -> getBaseAccessToken ( $workspaceID = 1323 , $name = 'Project tracker' ); // start using the available api calls to edit the data inside a base // ... More connection options Please see Establish the Connection for an overview of all connection options, the previous examples are for getting started. If you want to get a feeling about the usage, please see the Examples section: Add a new Column to a Base Get Content from a Base","title":"Get Access to a Base"},{"location":"#functions","text":"","title":"Functions"},{"location":"#admin-functions-user","text":"sysAdminListUsers(int $page = 1, int $perPage = 25) sysAdminAddUser(string $email, string $name, string $password, string $role = 'default') sysAdminSearchUser(string $query) sysAdminUpdateUser(string $email, array $changes = []) sysAdminDeleteUser(string $email)","title":"Admin Functions (User)"},{"location":"#workspace-functions-admin","text":"updateBase(int $workspaceId, string $baseName, array $changes = []) copyBaseExternalLink(string $link, int $destinationWorkspaceId)","title":"Workspace Functions (Admin)"},{"location":"#teammanagement-functions-admin","text":"Note On the webpage SeaTable always talks about teams . The technical term that is used within the API documentation and manual is organization (or org in short). sysAdminListTeams(int $page = 1, int $perPage = 25) sysAdminAddTeam(string $name, string $adminEmail, string $adminName, string $password, int $maxUser) sysAdminDeleteTeam(int $id) sysAdminUpdateTeam(int $id, array $changes = []) sysAdminListTeamUsers(int $id, int $page = 1, int $perPage = 25, bool $isStaff = false) sysAdminAddTeamUser(int $id, string $email, string $pass, string $name = null) sysAdminDeleteTeamUser(int $id, string $email) sysAdminListTeamGroups(int $id) sysAdminListTeamBases(int $id, int $page = 1, int $perPage = 25)","title":"Teammanagement Functions (Admin)"},{"location":"#functions-to-work-with-a-base-table-data","text":"listRows(string $tableName, string $viewName = null, bool $convertLinkId = false, string $orderBy = null, bool $direction = false, int $start = 0, int $limit = 1000) appendRow(string $tableName, array $row) getBaseMetadata() All Methods For the full list of functions, please see all public methods of the class \\SeaTable\\SeaTableApi\\SeaTableApi . More functions will be added in the future and the documentation improved.","title":"Functions to Work with a Base (Table Data)"},{"location":"#common-mistakes","text":"","title":"Common Mistakes"},{"location":"#there-are-two-kind-of-email-addresses-in-seatable","text":"There are two kind of email-addresses in SeaTable. Please don't be confused with the property email . There are two email addresses in SeaTable. Let's have a look at the user object in SeaTable: { \"data\" : [ { \"email\" : \"1ef456ab715841cc81b145b2530c2904@auth.local\" , \"name\" : \"Jane Doe\" , \"contact_email\" : \"jane@example.com, ... } ], \" t o tal _cou nt \": 1 } SeaTable creates for every user a unique identifier in form of an email address in the form of 1ef456ab715841cc81b145b2530c2904@auth.local . This unique identifier is used by the API calls to identify a user like in deleteOrgUser() . On the other hand a user registers with an email address for SeaTable. In this example this email is jane@example.com . This is the contact_email and only relevant for the authentication.","title":"There are two kind of Email-Addresses in SeaTable"},{"location":"UPGRADING/","text":"Upgrading \u00b6 This project is with Semantic Versioning (2.0.0) . This means that for the major version zero anything may change. Therefore, to ease use already for early versions, upgrade instructions for any such changes can be found in this document for an easy upgrade path. From very early Versions \u00b6 Change of Pagination Parameter Order (0.2.0) End of PHP 7.0 and PHP 7.1 support (0.2.0) Break of SeaTableApi::listOrgUsers() (0.1.20) Deprecation of SeaTableApi::getDTableToken() (0.1.11) Deprecation of PHP 7.0-7.3 (0.1.8) Removal of SeaTableAPI::debug() (0.1.7) New Classname (0.1.0) Curl SSL defaults (0.0.8) Upgrading from the SeaTableAPI.php Single Class/File (no version) Deprecations (0.x.x) Public Interface Change of Pagination Parameter Order (0.2.0) \u00b6 Version 0.2.0 corrects the non-intuitive order of the two pagination parameters (page and page size). Now first is the page number ( int $page ) and then size per page ( int $perPage ). These parameters always were with default values and the default values have not been changed. Otherwise, this is a backwards incompatible change, and it is without any additional deprecation or warning message. Affected methods are: \\SeaTable\\SeaTableApi\\SeaTableApi::listUsers \\SeaTable\\SeaTableApi\\SeaTableApi::listDailyActiveUsers \\SeaTable\\SeaTableApi\\SeaTableApi::listOrganizations \\SeaTable\\SeaTableApi\\SeaTableApi::listOrgUsers \\SeaTable\\SeaTableApi\\SeaTableApi::listOrgBases \\SeaTable\\SeaTableApi\\SeaTableApi::listAllSystemNotifications End of PHP 7.0 and PHP 7.1 support (0.2.0) \u00b6 As of version 0.1.8 PHP versions below PHP 7.4 were deprecated. With the release of version 0.2.0 the minimum PHP requirement is PHP 7.2.5. Break of SeaTableApi::listOrgUsers() (0.1.20) \u00b6 The $is_staff parameter of listOrgUsers() was broken and fixed in version 0.1.20. Unfortunately it could not be fixed without breaking backwards compatibility when using the $is_staff parameter. Previously when the $is_staff parameter was with the true default value, it was ineffective. Now the is_staff parameter is effective but the default value has changed to false . This ensures the behaviour is the same to previous but breaks in case the value true has been passed to obtain all users (admin and normal users) - true will now only return admin users. If true was in use to obtain all users, migrating to 0.1.20 requires to change $is_staff to false . Failing to do this will list admin users only . Upcoming Incompatible Changes in 0.2.x In 0.2.x the signature of the method will change with the $is_staff moved after the pagination parameters which will be swapped, too: 0.2.x: listOrgUsers(int $orgId, int $page = 1, int $perPage = 25, bool $isStaff = false): object 0.1.20: listOrgUsers($org_id, $is_staff = false, $per_page = 25, $page = 1) 0.1.19: listOrgUsers($org_id, $is_staff = true, $per_page = 25, $page = 1) Deprecation of SeaTableApi::getDTableToken() (0.1.11) \u00b6 The method getDTableToken() is deprecated. There are two new replacement methods to obtain a DTable Token: SeaTableApi::getBaseAppAccessToken() by the API Token SeaTableApi::getBaseAccessToken() by Workspace ID and DTable Name Deprecation of PHP 7.0-7.3 (0.1.8) \u00b6 With 0.1.8 the PHP versions below 7.4 are deprecated. Removal of SeaTableAPI::debug() (0.1.7) \u00b6 The in 0.0.4 deprecated SeaTableAPI::debug() method has been removed in 0.1.7. New Classname (0.1.0) \u00b6 If you previously used SeaTableAPI and you upgrade to version 0.1.0 or higher, replace it with SeaTableApi (lower-case pi at the end) from the new namespace SeaTable\\SeaTableApi . The use of the old class-name SeaTableAPI in the global namespace is deprecated with 0.1.0 and usages of the old class-name emit a deprecation notice ( E_USER_DEPRECATED ) on creation. Before: $seatable = new SeaTableAPI([ 'url' => 'https://cloud.seatable.io', 'user' => 'demo@example.com', 'password' => 'very-secure-password' ]); After: use SeaTable\\SeaTableApi\\SeaTableApi; $seatable = new SeaTableApi([ 'url' => 'https://cloud.seatable.io', 'user' => 'demo@example.com', 'password' => 'very-secure-password' ]); Curl SSL defaults (0.0.8) \u00b6 Version 0.0.8 changed to the cUrl library SSL defaults to improve security (and portability) for CURLOPT_SSL_VERIFYPEER and CURLOPT_SSL_VERIFYHOST . If you rely on non-default values for these two settings, you can pass them explicitly as options when creating the API class: $seatable = new SeaTableAPI([ 'http_options' => [ CURLOPT_SSL_VERIFYPEER => true, // always `false` before 0.0.8 CURLOPT_SSL_VERIFYHOST => 2, // always `false` before 0.0.8 ] ]); Upgrading from the SeaTableAPI.php Single Class/File (no version) \u00b6 If you previously just copied the SeaTableAPI.php file, you can replace it with the seatable/seatable-api-php composer package version 0.0.3: composer require seatable/seatable-api-php:0.0.3 Deprecations (0.x.x) \u00b6 For early versions, deprecations in the public interface are introduced not in minor but in patch versions. There is at least one patch version with the deprecation, and removal will not be before that patch version. Deprecations are @deprecated annotated and should trigger an E_USER_DEPRECATED error so that deprecations can be easily tracked while using. It then normally takes a couple of patch releases until a deprecated part of the public interface is fully removed. But note this must not necessarily be more than zero more patch releases and especially not a new minor release. However, expect the next minor release to not have the deprecated functionality any longer. In case it contains deprecation warnings from a previous minor release, expect it to not have the deprecated functionality any longer, the warning does not safeguard anything. To safely upgrade, test against your usage pattern with each patch version and handle the deprecations as early as possible. Public Interface \u00b6 Parts of the API marked as @internal are not part of the public interface and can change in any (patch) release. Parameters and return values in the public interface are still volatile and therefore not every of their properties can be easily guarded by deprecation warnings (or the PHP language itself). Even we do not take breaking changes lightly, please consider the following, more detailed information: Types of Parameters / Return Types \u00b6 If type-information for a parameter or a return value changes, the previous type-information unmatched by the change is considered deprecated, but not necessarily with a deprecation warning (for return-type-information a deprecation warning would likely not be useful if even possible). Run a type-checker to detect any issues with each patch release to be on the safe side: Changes in the signature (that have their effect with declare(strict_types=1) ) are not introduced in the same patch release unless the signature itself already contained the type-information for that parameter. That is before more strict and binding type-information is added, the information is annotated first. However, as the library uses declare(strict_types=1) internally, type errors may surface already earlier. Therefore, we suggest using the library with declare(strict_types=1) to narrow potential type related problems already when using the library. Named Parameters \u00b6 Calling any method or function of the public interface with named parameters (PHP 8.0+) is considered undefined behaviour. That is, it does not fall into any backward compatibility promise of any kind.","title":"Upgrading"},{"location":"UPGRADING/#upgrading","text":"This project is with Semantic Versioning (2.0.0) . This means that for the major version zero anything may change. Therefore, to ease use already for early versions, upgrade instructions for any such changes can be found in this document for an easy upgrade path.","title":"Upgrading"},{"location":"UPGRADING/#from-very-early-versions","text":"Change of Pagination Parameter Order (0.2.0) End of PHP 7.0 and PHP 7.1 support (0.2.0) Break of SeaTableApi::listOrgUsers() (0.1.20) Deprecation of SeaTableApi::getDTableToken() (0.1.11) Deprecation of PHP 7.0-7.3 (0.1.8) Removal of SeaTableAPI::debug() (0.1.7) New Classname (0.1.0) Curl SSL defaults (0.0.8) Upgrading from the SeaTableAPI.php Single Class/File (no version) Deprecations (0.x.x) Public Interface","title":"From very early Versions"},{"location":"UPGRADING/#change-of-pagination-parameter-order-020","text":"Version 0.2.0 corrects the non-intuitive order of the two pagination parameters (page and page size). Now first is the page number ( int $page ) and then size per page ( int $perPage ). These parameters always were with default values and the default values have not been changed. Otherwise, this is a backwards incompatible change, and it is without any additional deprecation or warning message. Affected methods are: \\SeaTable\\SeaTableApi\\SeaTableApi::listUsers \\SeaTable\\SeaTableApi\\SeaTableApi::listDailyActiveUsers \\SeaTable\\SeaTableApi\\SeaTableApi::listOrganizations \\SeaTable\\SeaTableApi\\SeaTableApi::listOrgUsers \\SeaTable\\SeaTableApi\\SeaTableApi::listOrgBases \\SeaTable\\SeaTableApi\\SeaTableApi::listAllSystemNotifications","title":"Change of Pagination Parameter Order (0.2.0)"},{"location":"UPGRADING/#end-of-php-70-and-php-71-support-020","text":"As of version 0.1.8 PHP versions below PHP 7.4 were deprecated. With the release of version 0.2.0 the minimum PHP requirement is PHP 7.2.5.","title":"End of PHP 7.0 and PHP 7.1 support (0.2.0)"},{"location":"UPGRADING/#break-of-seatableapilistorgusers-0120","text":"The $is_staff parameter of listOrgUsers() was broken and fixed in version 0.1.20. Unfortunately it could not be fixed without breaking backwards compatibility when using the $is_staff parameter. Previously when the $is_staff parameter was with the true default value, it was ineffective. Now the is_staff parameter is effective but the default value has changed to false . This ensures the behaviour is the same to previous but breaks in case the value true has been passed to obtain all users (admin and normal users) - true will now only return admin users. If true was in use to obtain all users, migrating to 0.1.20 requires to change $is_staff to false . Failing to do this will list admin users only . Upcoming Incompatible Changes in 0.2.x In 0.2.x the signature of the method will change with the $is_staff moved after the pagination parameters which will be swapped, too: 0.2.x: listOrgUsers(int $orgId, int $page = 1, int $perPage = 25, bool $isStaff = false): object 0.1.20: listOrgUsers($org_id, $is_staff = false, $per_page = 25, $page = 1) 0.1.19: listOrgUsers($org_id, $is_staff = true, $per_page = 25, $page = 1)","title":"Break of SeaTableApi::listOrgUsers() (0.1.20)"},{"location":"UPGRADING/#deprecation-of-seatableapigetdtabletoken-0111","text":"The method getDTableToken() is deprecated. There are two new replacement methods to obtain a DTable Token: SeaTableApi::getBaseAppAccessToken() by the API Token SeaTableApi::getBaseAccessToken() by Workspace ID and DTable Name","title":"Deprecation of SeaTableApi::getDTableToken() (0.1.11)"},{"location":"UPGRADING/#deprecation-of-php-70-73-018","text":"With 0.1.8 the PHP versions below 7.4 are deprecated.","title":"Deprecation of PHP 7.0-7.3 (0.1.8)"},{"location":"UPGRADING/#removal-of-seatableapidebug-017","text":"The in 0.0.4 deprecated SeaTableAPI::debug() method has been removed in 0.1.7.","title":"Removal of SeaTableAPI::debug() (0.1.7)"},{"location":"UPGRADING/#new-classname-010","text":"If you previously used SeaTableAPI and you upgrade to version 0.1.0 or higher, replace it with SeaTableApi (lower-case pi at the end) from the new namespace SeaTable\\SeaTableApi . The use of the old class-name SeaTableAPI in the global namespace is deprecated with 0.1.0 and usages of the old class-name emit a deprecation notice ( E_USER_DEPRECATED ) on creation. Before: $seatable = new SeaTableAPI([ 'url' => 'https://cloud.seatable.io', 'user' => 'demo@example.com', 'password' => 'very-secure-password' ]); After: use SeaTable\\SeaTableApi\\SeaTableApi; $seatable = new SeaTableApi([ 'url' => 'https://cloud.seatable.io', 'user' => 'demo@example.com', 'password' => 'very-secure-password' ]);","title":"New Classname (0.1.0)"},{"location":"UPGRADING/#curl-ssl-defaults-008","text":"Version 0.0.8 changed to the cUrl library SSL defaults to improve security (and portability) for CURLOPT_SSL_VERIFYPEER and CURLOPT_SSL_VERIFYHOST . If you rely on non-default values for these two settings, you can pass them explicitly as options when creating the API class: $seatable = new SeaTableAPI([ 'http_options' => [ CURLOPT_SSL_VERIFYPEER => true, // always `false` before 0.0.8 CURLOPT_SSL_VERIFYHOST => 2, // always `false` before 0.0.8 ] ]);","title":"Curl SSL defaults (0.0.8)"},{"location":"UPGRADING/#upgrading-from-the-seatableapiphp-single-classfile-no-version","text":"If you previously just copied the SeaTableAPI.php file, you can replace it with the seatable/seatable-api-php composer package version 0.0.3: composer require seatable/seatable-api-php:0.0.3","title":"Upgrading from the SeaTableAPI.php Single Class/File (no version)"},{"location":"UPGRADING/#deprecations-0xx","text":"For early versions, deprecations in the public interface are introduced not in minor but in patch versions. There is at least one patch version with the deprecation, and removal will not be before that patch version. Deprecations are @deprecated annotated and should trigger an E_USER_DEPRECATED error so that deprecations can be easily tracked while using. It then normally takes a couple of patch releases until a deprecated part of the public interface is fully removed. But note this must not necessarily be more than zero more patch releases and especially not a new minor release. However, expect the next minor release to not have the deprecated functionality any longer. In case it contains deprecation warnings from a previous minor release, expect it to not have the deprecated functionality any longer, the warning does not safeguard anything. To safely upgrade, test against your usage pattern with each patch version and handle the deprecations as early as possible.","title":"Deprecations (0.x.x)"},{"location":"UPGRADING/#public-interface","text":"Parts of the API marked as @internal are not part of the public interface and can change in any (patch) release. Parameters and return values in the public interface are still volatile and therefore not every of their properties can be easily guarded by deprecation warnings (or the PHP language itself). Even we do not take breaking changes lightly, please consider the following, more detailed information:","title":"Public Interface"},{"location":"UPGRADING/#types-of-parameters-return-types","text":"If type-information for a parameter or a return value changes, the previous type-information unmatched by the change is considered deprecated, but not necessarily with a deprecation warning (for return-type-information a deprecation warning would likely not be useful if even possible). Run a type-checker to detect any issues with each patch release to be on the safe side: Changes in the signature (that have their effect with declare(strict_types=1) ) are not introduced in the same patch release unless the signature itself already contained the type-information for that parameter. That is before more strict and binding type-information is added, the information is annotated first. However, as the library uses declare(strict_types=1) internally, type errors may surface already earlier. Therefore, we suggest using the library with declare(strict_types=1) to narrow potential type related problems already when using the library.","title":"Types of Parameters / Return Types"},{"location":"UPGRADING/#named-parameters","text":"Calling any method or function of the public interface with named parameters (PHP 8.0+) is considered undefined behaviour. That is, it does not fall into any backward compatibility promise of any kind.","title":"Named Parameters"},{"location":"doc/add-new-column-to-base/","text":"Example: Add a new Column to a Base \u00b6 Prerequisites \u00b6 You need: a SeaTable account like demo@example.com an API-key for a base like 1d3303315348c6b566c44709d459b33b6bac5ad1 (read and write) the name of the table and the columns inside the base like table-name: Tasks columns of this table: Name , Description Example PHP-code \u00b6 <?php declare ( strict_types = 1 ); // setting up autoloader require_once __DIR__ . '/../vendor/autoload.php' ; // use SeaTable api class use SeaTable\\SeaTableApi\\SeaTableApi ; // init and get access with an api-token for a base $seatable = new SeaTableApi ([ 'url' => 'https://cloud.seatable.io' , 'base_app_api_token' => '1d3303315348c6b566c44709d459b33b6bac5ad1' , ]); // Append a row $row = [ 'Name' => \"New Task XYZ\" , 'Description' => \"This is a new description\" ]; $result = $seatable -> appendRow ( 'Tasks' , $row );","title":"Add a new Column to a Base"},{"location":"doc/add-new-column-to-base/#example-add-a-new-column-to-a-base","text":"","title":"Example: Add a new Column to a Base"},{"location":"doc/add-new-column-to-base/#prerequisites","text":"You need: a SeaTable account like demo@example.com an API-key for a base like 1d3303315348c6b566c44709d459b33b6bac5ad1 (read and write) the name of the table and the columns inside the base like table-name: Tasks columns of this table: Name , Description","title":"Prerequisites"},{"location":"doc/add-new-column-to-base/#example-php-code","text":"<?php declare ( strict_types = 1 ); // setting up autoloader require_once __DIR__ . '/../vendor/autoload.php' ; // use SeaTable api class use SeaTable\\SeaTableApi\\SeaTableApi ; // init and get access with an api-token for a base $seatable = new SeaTableApi ([ 'url' => 'https://cloud.seatable.io' , 'base_app_api_token' => '1d3303315348c6b566c44709d459b33b6bac5ad1' , ]); // Append a row $row = [ 'Name' => \"New Task XYZ\" , 'Description' => \"This is a new description\" ]; $result = $seatable -> appendRow ( 'Tasks' , $row );","title":"Example PHP-code"},{"location":"doc/composer-json/","text":"SeaTableApi Composer Package \u00b6 SeaTableApi on Packagist Find seatable/seatable-api-php on Packagist, the default Composer package repository. { \"name\" : \"seatable/seatable-api-php\" , \"description\" : \"PHP bindings for the SeaTable Web API\" , \"type\" : \"library\" , \"keywords\" : [ \"SeaTable\" ], \"homepage\" : \"https://seatable.io/\" , \"readme\" : \"README.md\" , \"license\" : \"Apache-2.0\" , \"authors\" : [ { \"name\" : \"Christoph Dyllick-Brenzinger\" }, { \"name\" : \"Tom Klingenberg\" } ], \"support\" : { \"docs\" : \"https://seatable.github.io/seatable-api-php/\" , \"forum\" : \"https://forum.seatable.io/\" , \"source\" : \"https://github.com/seatable/seatable-api-php\" }, \"require\" : { \"php\" : \">=7.2.5\" , \"ext-curl\" : \"*\" , \"ext-json\" : \"*\" }, \"require-dev\" : { \"friendsofphp/php-cs-fixer\" : \"^3.0.0\" , \"internations/http-mock\" : \"^0.14.0\" , \"kubawerlos/php-cs-fixer-custom-fixers\" : \"^2.5 || ^3.3\" , \"phpcompatibility/php-compatibility\" : \"^9.3\" , \"phpunit/phpunit\" : \"^9.5\" }, \"autoload\" : { \"files\" : [ \"src/Compat/Deprecation/autoload.php\" ], \"psr-4\" : { \"SeaTable\\\\SeaTableApi\\\\\" : \"src/\" } }, \"autoload-dev\" : { \"psr-4\" : { \"SeaTable\\\\SeaTableApi\\\\\" : \"test/unit/\" } }, \"scripts\" : { \"test\" : [ \"@composer --no-plugins --version\" , \"@composer --no-plugins validate --no-check-lock --strict\" , \"@lint-and-load\" , \"@php-test\" , \"@php .config/composer/vcache.php\" , \"@composer --no-plugins -q install --no-scripts --no-progress\" , \"@phpunit\" , \"@php-cs-fixer\" , \"@phpcs\" , \"@composer --no-plugins outdated --direct\" ], \"lint-and-load\" : [ \"printf \\\"%s: \\\" \\\"$PHP_BINARY\\\" && \\\"$PHP_BINARY\\\" -l src/SeaTableApi.php && \\\"$PHP_BINARY\\\" -r 'require \\\"src/SeaTableApi.php\\\";'\" ], \"php-cs-fixer\" : [ \"@composer --no-plugins exec -- php-cs-fixer fix ${CI:+--dry-run --diff} --config=.config/php-cs-fixer/.php-cs-fixer.php\" , \"git --no-pager diff --check --ws-error-highlight=new\" ], \"php-test\" : [ \"@composer --no-plugins dump-autoload\" , \"test/php/autoload.php\" ], \"phpcs\" : [ \"@composer --no-plugins exec phpcs -- --standard=.config/phpcs/config.xml\" ], \"phpunit\" : [ \"@php .config/composer/vcache.php\" , \"@composer --no-plugins -q install --no-scripts --no-progress\" , \"@putenv XDEBUG_MODE=coverage\" , \"\\\"$PHP_BINARY\\\" -d zend.assertions=1 -d assert.exception=1 .config/composer/vendor/bin/phpunit --configuration .config/phpunit\" ] }, \"scripts-descriptions\" : { \"test\" : \"run all tests\" }, \"config\" : { \"sort-packages\" : true , \"vendor-dir\" : \".config/composer/vendor\" } }","title":"SeaTableApi Composer Package"},{"location":"doc/composer-json/#seatableapi-composer-package","text":"SeaTableApi on Packagist Find seatable/seatable-api-php on Packagist, the default Composer package repository. { \"name\" : \"seatable/seatable-api-php\" , \"description\" : \"PHP bindings for the SeaTable Web API\" , \"type\" : \"library\" , \"keywords\" : [ \"SeaTable\" ], \"homepage\" : \"https://seatable.io/\" , \"readme\" : \"README.md\" , \"license\" : \"Apache-2.0\" , \"authors\" : [ { \"name\" : \"Christoph Dyllick-Brenzinger\" }, { \"name\" : \"Tom Klingenberg\" } ], \"support\" : { \"docs\" : \"https://seatable.github.io/seatable-api-php/\" , \"forum\" : \"https://forum.seatable.io/\" , \"source\" : \"https://github.com/seatable/seatable-api-php\" }, \"require\" : { \"php\" : \">=7.2.5\" , \"ext-curl\" : \"*\" , \"ext-json\" : \"*\" }, \"require-dev\" : { \"friendsofphp/php-cs-fixer\" : \"^3.0.0\" , \"internations/http-mock\" : \"^0.14.0\" , \"kubawerlos/php-cs-fixer-custom-fixers\" : \"^2.5 || ^3.3\" , \"phpcompatibility/php-compatibility\" : \"^9.3\" , \"phpunit/phpunit\" : \"^9.5\" }, \"autoload\" : { \"files\" : [ \"src/Compat/Deprecation/autoload.php\" ], \"psr-4\" : { \"SeaTable\\\\SeaTableApi\\\\\" : \"src/\" } }, \"autoload-dev\" : { \"psr-4\" : { \"SeaTable\\\\SeaTableApi\\\\\" : \"test/unit/\" } }, \"scripts\" : { \"test\" : [ \"@composer --no-plugins --version\" , \"@composer --no-plugins validate --no-check-lock --strict\" , \"@lint-and-load\" , \"@php-test\" , \"@php .config/composer/vcache.php\" , \"@composer --no-plugins -q install --no-scripts --no-progress\" , \"@phpunit\" , \"@php-cs-fixer\" , \"@phpcs\" , \"@composer --no-plugins outdated --direct\" ], \"lint-and-load\" : [ \"printf \\\"%s: \\\" \\\"$PHP_BINARY\\\" && \\\"$PHP_BINARY\\\" -l src/SeaTableApi.php && \\\"$PHP_BINARY\\\" -r 'require \\\"src/SeaTableApi.php\\\";'\" ], \"php-cs-fixer\" : [ \"@composer --no-plugins exec -- php-cs-fixer fix ${CI:+--dry-run --diff} --config=.config/php-cs-fixer/.php-cs-fixer.php\" , \"git --no-pager diff --check --ws-error-highlight=new\" ], \"php-test\" : [ \"@composer --no-plugins dump-autoload\" , \"test/php/autoload.php\" ], \"phpcs\" : [ \"@composer --no-plugins exec phpcs -- --standard=.config/phpcs/config.xml\" ], \"phpunit\" : [ \"@php .config/composer/vcache.php\" , \"@composer --no-plugins -q install --no-scripts --no-progress\" , \"@putenv XDEBUG_MODE=coverage\" , \"\\\"$PHP_BINARY\\\" -d zend.assertions=1 -d assert.exception=1 .config/composer/vendor/bin/phpunit --configuration .config/phpunit\" ] }, \"scripts-descriptions\" : { \"test\" : \"run all tests\" }, \"config\" : { \"sort-packages\" : true , \"vendor-dir\" : \".config/composer/vendor\" } }","title":"SeaTableApi Composer Package"},{"location":"doc/establish-the-connection/","text":"Establish the Connection \u00b6 The SeaTable PHP Api authenticates on creation by passing the authentication options as an associative array with the keys as option names and the values as the option values. PHP Connection Example <?php declare ( strict_types = 1 ); // setting up autoloader require_once __DIR__ . '/vendor/autoload.php' ; // use SeaTable api class use SeaTable\\SeaTableApi\\SeaTableApi ; // init and obtain auth token $seatable = new SeaTableApi ([ 'url' => 'https://cloud.seatable.io' , 'user' => 'your email...' , 'password' => 'you password...' ]); // start using the available api calls echo $seatable -> ping (); Options \u00b6 url URL of the SeaTable server instance. Without a trailing slash. Authentication Options \u00b6 Depending on which authentication is preferred, authentication options are different for the different ways to authenticate. Via the constructor option the class supports three different ways to authentication, of which one will be in effect: Username+Password Auth-Token Base-App-API-Token SeaTable Cloud Team-Admin Find your API Token and Base Tokens under API & Integrations (account.seatable.io) . Username+Password Authentication \u00b6 user Username as used in the frontend to login (email). password Password. Auth-Token Authentication \u00b6 auth_token The authentication token. In the SeaTable API Docs Authentication: a) User authentication (auth token) The SeaTable API uses a token to authenticate requests. This auth token can be created by an API request which requires username and password. As soon as you know your auth token, you do not need to provide your password again. An auth token is usually 40 characters long and is a kind of persistent master key for your account. Compare a) User authentication (auth token) in Authentication (api.seatable.io) . Base-App-API-Token Authentication \u00b6 base_app_api_token API token for the base app to authenticate against. base_app_name (optional) Name of the base app (can be given when creating the API token). Is verified when given. Best for Getting Started New in 0.2.0 The base_app_api_token is the archetype of the SeaTable API token when it comes to creating and interacting with your own apps and open-up to third-party integrations. It is also one of - if not the - easiest to use, administer and manage over time. That's why we at SeaTable think this is the best option to get started and get the most out of a SeaTable Base (App). In the SeaTable API Docs Base API Token Base API Tokens are extremely useful if you would like a third-party integration to manipulate your base automatically for you. For each third-party App, you can create a unique App API Token for them and define read/write permissions. This token is then valid until you delete them. Compare Base API Token in Authentication (api.seatable.io) . The Base-Access-Token \u00b6 This form of authentication is used in the API and the SeaTable API PHP binding handles it during connection. It is internal with the authentication options above. It still can be acquired by the getBaseAccessToken() method to enable base access with Username+Password Authentication for a specific workspace and base, which stems from earlier versions. In the SeaTable API Docs Authentication: b) Base authentication (base access token) To access a SeaTable base or manipulate the data or structure of a base you need another token. This one is called base access token. This base access token is about 249 characters long and is only valid for three days. There are currently three ways to get this base access token: create a base access token from an API token (created at SeaTable web interface) create a base access token via auth token create a base access token via invite link token Compare b) Base authentication (base access token) in Authentication (api.seatable.io) . Legacy Information The pairing method getBaseAppAccessToken() is still available to obtain a base-access-token with the Base-App-API-Token Authentication token, but it is recommended to use the now existing option instead: base_app_api_token . Options and API Doc Variables \u00b6 Depending on area the names of options to variables varies a little, an overview across contexts. Wording in parentheses. API PHP Option API Doc Variables Team Admin auth_token admin_token , org_admin_token , user_token ( auth token ) ( Your API Token ) base_app_api_token base_api_token ( API Token / Base API Token / App API Token ) ( Your Base Tokens ) n/a ( Base-Access-Token ) access_token ( -/- )","title":"Establish the Connection"},{"location":"doc/establish-the-connection/#establish-the-connection","text":"The SeaTable PHP Api authenticates on creation by passing the authentication options as an associative array with the keys as option names and the values as the option values. PHP Connection Example <?php declare ( strict_types = 1 ); // setting up autoloader require_once __DIR__ . '/vendor/autoload.php' ; // use SeaTable api class use SeaTable\\SeaTableApi\\SeaTableApi ; // init and obtain auth token $seatable = new SeaTableApi ([ 'url' => 'https://cloud.seatable.io' , 'user' => 'your email...' , 'password' => 'you password...' ]); // start using the available api calls echo $seatable -> ping ();","title":"Establish the Connection"},{"location":"doc/establish-the-connection/#options","text":"url URL of the SeaTable server instance. Without a trailing slash.","title":"Options"},{"location":"doc/establish-the-connection/#authentication-options","text":"Depending on which authentication is preferred, authentication options are different for the different ways to authenticate. Via the constructor option the class supports three different ways to authentication, of which one will be in effect: Username+Password Auth-Token Base-App-API-Token SeaTable Cloud Team-Admin Find your API Token and Base Tokens under API & Integrations (account.seatable.io) .","title":"Authentication Options"},{"location":"doc/establish-the-connection/#usernamepassword-authentication","text":"user Username as used in the frontend to login (email). password Password.","title":"Username+Password Authentication"},{"location":"doc/establish-the-connection/#auth-token-authentication","text":"auth_token The authentication token. In the SeaTable API Docs Authentication: a) User authentication (auth token) The SeaTable API uses a token to authenticate requests. This auth token can be created by an API request which requires username and password. As soon as you know your auth token, you do not need to provide your password again. An auth token is usually 40 characters long and is a kind of persistent master key for your account. Compare a) User authentication (auth token) in Authentication (api.seatable.io) .","title":"Auth-Token Authentication"},{"location":"doc/establish-the-connection/#base-app-api-token-authentication","text":"base_app_api_token API token for the base app to authenticate against. base_app_name (optional) Name of the base app (can be given when creating the API token). Is verified when given. Best for Getting Started New in 0.2.0 The base_app_api_token is the archetype of the SeaTable API token when it comes to creating and interacting with your own apps and open-up to third-party integrations. It is also one of - if not the - easiest to use, administer and manage over time. That's why we at SeaTable think this is the best option to get started and get the most out of a SeaTable Base (App). In the SeaTable API Docs Base API Token Base API Tokens are extremely useful if you would like a third-party integration to manipulate your base automatically for you. For each third-party App, you can create a unique App API Token for them and define read/write permissions. This token is then valid until you delete them. Compare Base API Token in Authentication (api.seatable.io) .","title":"Base-App-API-Token Authentication"},{"location":"doc/establish-the-connection/#the-base-access-token","text":"This form of authentication is used in the API and the SeaTable API PHP binding handles it during connection. It is internal with the authentication options above. It still can be acquired by the getBaseAccessToken() method to enable base access with Username+Password Authentication for a specific workspace and base, which stems from earlier versions. In the SeaTable API Docs Authentication: b) Base authentication (base access token) To access a SeaTable base or manipulate the data or structure of a base you need another token. This one is called base access token. This base access token is about 249 characters long and is only valid for three days. There are currently three ways to get this base access token: create a base access token from an API token (created at SeaTable web interface) create a base access token via auth token create a base access token via invite link token Compare b) Base authentication (base access token) in Authentication (api.seatable.io) . Legacy Information The pairing method getBaseAppAccessToken() is still available to obtain a base-access-token with the Base-App-API-Token Authentication token, but it is recommended to use the now existing option instead: base_app_api_token .","title":"The Base-Access-Token"},{"location":"doc/establish-the-connection/#options-and-api-doc-variables","text":"Depending on area the names of options to variables varies a little, an overview across contexts. Wording in parentheses. API PHP Option API Doc Variables Team Admin auth_token admin_token , org_admin_token , user_token ( auth token ) ( Your API Token ) base_app_api_token base_api_token ( API Token / Base API Token / App API Token ) ( Your Base Tokens ) n/a ( Base-Access-Token ) access_token ( -/- )","title":"Options and API Doc Variables"},{"location":"doc/get-content-from-a-base/","text":"Example: Get Content from a Base \u00b6 Prerequisites \u00b6 You need: A SeaTable Base and for it an API-key like 1d3303315348c6b566c44709d459b33b6bac5ad1 (read-only is fine) A table name like Articles The columns in that table: Status (single select) Description Title URL Example PHP-code \u00b6 <?php declare ( strict_types = 1 ); // setting up autoloader require_once __DIR__ . '/../vendor/autoload.php' ; // use SeaTable api class use SeaTable\\SeaTableApi\\SeaTableApi ; // init and get access with an api-token for a base $seatable = new SeaTableApi ([ 'url' => 'https://cloud.seatable.io' , 'base_app_api_token' => '1d3303315348c6b577c44709d459b33b6bac5ad1' , ]); // get all rows from the table Articles $rows = $seatable -> listRowsByView ( 'Articles' ); ?> <ul class=\"my-reports\"> <?php foreach ( $rows as $row ) if ( $row -> Status === 'published' ) { ?> <li> <h2><a href=\" <? = htmlspecialchars ( $row -> URL , ENT_QUOTES | ENT_HTML5 ) ?> \" target=\"_blank\"> <? = htmlspecialchars ( $row -> Title , ENT_HTML5 ) ?> </a></h2> <div class=\"desc\"> <p> <? = htmlspecialchars ( $row -> Description , ENT_HTML5 ) ?> </p> </div> </li> <?php } /* foreach $rows if $row->Status published */ ?> </ul>","title":"Get Content from a Base"},{"location":"doc/get-content-from-a-base/#example-get-content-from-a-base","text":"","title":"Example: Get Content from a Base"},{"location":"doc/get-content-from-a-base/#prerequisites","text":"You need: A SeaTable Base and for it an API-key like 1d3303315348c6b566c44709d459b33b6bac5ad1 (read-only is fine) A table name like Articles The columns in that table: Status (single select) Description Title URL","title":"Prerequisites"},{"location":"doc/get-content-from-a-base/#example-php-code","text":"<?php declare ( strict_types = 1 ); // setting up autoloader require_once __DIR__ . '/../vendor/autoload.php' ; // use SeaTable api class use SeaTable\\SeaTableApi\\SeaTableApi ; // init and get access with an api-token for a base $seatable = new SeaTableApi ([ 'url' => 'https://cloud.seatable.io' , 'base_app_api_token' => '1d3303315348c6b577c44709d459b33b6bac5ad1' , ]); // get all rows from the table Articles $rows = $seatable -> listRowsByView ( 'Articles' ); ?> <ul class=\"my-reports\"> <?php foreach ( $rows as $row ) if ( $row -> Status === 'published' ) { ?> <li> <h2><a href=\" <? = htmlspecialchars ( $row -> URL , ENT_QUOTES | ENT_HTML5 ) ?> \" target=\"_blank\"> <? = htmlspecialchars ( $row -> Title , ENT_HTML5 ) ?> </a></h2> <div class=\"desc\"> <p> <? = htmlspecialchars ( $row -> Description , ENT_HTML5 ) ?> </p> </div> </li> <?php } /* foreach $rows if $row->Status published */ ?> </ul>","title":"Example PHP-code"},{"location":"doc/seatableapi-php/","text":"SeaTableApi (PHP) \u00b6 <?php namespace SeaTable\\SeaTableApi ; use SeaTable\\SeaTableApi\\Internal\\ApiOptions ; use SeaTable\\SeaTableApi\\Internal\\RestCurlClientEx ; use SeaTable\\SeaTableApi\\Internal\\RestCurlClientExInterface ; use SeaTable\\SeaTableApi\\Internal\\Util ; /** * SeaTable API - PHP class wrapper * * @author <cdb@seatable.io> (thanks for the inspiration by <ben@netcap.fr>) * @copyright 2020, 2021 SeaTable GmbH * @license APACHE-2.0 * * SeaTable - Next-generation online spreadsheet <https://seatable.io> * * SeaTable API <https://api.seatable.io/> (formerly: <https://docs.seatable.io/published/seatable-api/home.md>) */ class SeaTableApi { private $seatable_url ; # url of the SeaTable server private $dtable_uuid ; /** * @var RestCurlClientExInterface */ private $restCurlClientEx ; /** * Instantiate SeaTable class * * @param array{url: string, user: string, password: string, port?: int, base_api_token?: string, base_app_name?: string, api_token?: string} $options * @throws Exception */ public function __construct ( array $options = []) { /* * Input validation */ $apiOptions = ApiOptions :: createFromArray ( $options ); $this -> seatable_url = $apiOptions -> getUrl (); $this -> restCurlClientEx = new RestCurlClientEx ( $apiOptions -> getHttpOptions ()); $this -> authenticate ( $apiOptions ); } /** * authenticate based on options * * @param ApiOptions $options * @return void */ private function authenticate ( ApiOptions $options ) : void { if ( $options -> authIsUser ()) { // $this->restCurlClientEx->seatable_token // 2.1 'Authorization: Token ' . $this->seatable_token $this -> getAuthToken ( $options -> getUser (), $options -> getPassword ()); return ; } if ( $options -> authIsApi ()) { // $this->restCurlClientEx->access_token = $o->access_token; // api/v1/dtables 'Authorization: Token ' . $this->access_token $accessToken = $this -> getBaseAppAccessToken ( $options -> getBaseApiToken ()); if ( ( null !== $expectedAppName = $options -> getBaseAppName ()) && $accessToken -> app_name !== $expectedAppName ) { throw new Exception ( sprintf ( 'SeaTable invalid application name: \"%s\"' , $expectedAppName )); } return ; } if ( $options -> authIsToken ()) { $this -> restCurlClientEx -> seatable_token = $options -> getAuthToken (); return ; } throw new Exception ( 'SeaTable found no authentication option.' ); } /** * Obtain SeaTable Auth Token * * @param string $username * @param string $password * @return void */ private function getAuthToken ( string $username , string $password ) : void { $data = $this -> restCurlClientEx -> post ( $this -> seatable_url . '/api2/auth-token/' , [ 'username' => $username , 'password' => $password , ]); $this -> restCurlClientEx -> seatable_token = ( string ) $data -> token ; } /** * Ping Server (with authentication) * * @group Authentication / Ping Server * @link https://api.seatable.io/#5a2261c2-4e87-44fa-8b28-0145759de970 * * @return string \"pong\" if auth token is correct */ public function ping () : string { $request = $this -> seatable_url . '/api2/auth/ping/' ; return $this -> restCurlClientEx -> get ( $request ); } /** * Get Account Info * * @group User / Account * @link https://api.seatable.io/#66ce3ca0-edc5-486b-8877-91157bb71d7d */ public function getAccountInfo () : object { $request = \" $this->seatable_url /api2/account/info/\" ; return $this -> restCurlClientEx -> get ( $request ); } /** * List All Users * * @group System Admin / Users * @link https://api.seatable.io/#883d8faf-1f2a-4033-8904-0171fece890c * * @param int $page Select Page the users shown from (default 1) * @param int $perPage Number of users that should be shown (default = 25) * @return object */ public function sysAdminListUsers ( int $page = 1 , int $perPage = 25 ) : object { $request = \" $this->seatable_url /api/v2.1/admin/users/?per_page= $perPage &page= $page \" ; return $this -> restCurlClientEx -> get ( $request ); } /** * Add New User * * @group System Admin / Users * @link https://api.seatable.io/#922eb788-ebad-47b1-af34-e1aec536182e * * @param string $email * @param string $name * @param string $password * @param string $role * @return object with user account details */ public function sysAdminAddUser ( string $email , string $name , string $password , string $role = 'default' ) : object { $request = \" $this->seatable_url /api/v2.1/admin/users/\" ; $form = [ 'email' => $email , 'name' => $name , 'password' => $password , 'role' => $role , ]; return $this -> restCurlClientEx -> post ( $request , $form ); } /** * Search a User * * @group System Admin / Users * @link https://api.seatable.io/#95fcb3f1-5496-4113-a078-22972c19e583 * * @param string $query * @return object */ public function sysAdminSearchUser ( string $query ) : object { $request = \" $this->seatable_url /api/v2.1/admin/search-user/?query=\" . urlencode ( $query ); return $this -> restCurlClientEx -> get ( $request ); } /** * Update User * * @group System Admin / Users * @link https://api.seatable.io/#8fcb4411-4007-495a-b3f3-c3014c4f7ace * * @param string $email * @param array $changes role, ... * @return object */ public function sysAdminUpdateUser ( string $email , array $changes = []) : object { $request = \" $this->seatable_url /api/v2.1/admin/users/\" . rawurlencode ( $email ) . '/' ; return $this -> restCurlClientEx -> put ( $request , $changes ); } /** * Delete User * * @group System Admin / Users * @link https://api.seatable.io/#17bdf15e-fbb8-4fa9-b8ef-43841fc6c40d * * @param string $email * @return array|object|string|null */ public function sysAdminDeleteUser ( string $email ) : object { $request = \" $this->seatable_url /api/v2.1/admin/users/\" . rawurlencode ( $email ) . '/' ; return $this -> restCurlClientEx -> delete ( $request ); } /** * List Workspaces * * @group User / Workspaces * @link https://api.seatable.io/#bb823388-ccfb-4dc2-bb01-5eb81acb6683 * * @return object */ public function listWorkspaces () : object { $request = \" $this->seatable_url /api/v2.1/workspaces/\" ; return $this -> restCurlClientEx -> get ( $request ); } /** * Update a Base * * Update a base's name, icon and icon color. * * @group User / Bases / Base Management * @link https://api.seatable.io/#55d6c818-3247-4b89-b169-9de2872a023f * * @param int $workspaceId * @param string $baseName * @param array $changes * @return object */ public function updateBase ( int $workspaceId , string $baseName , array $changes = []) : object { $changes [ 'name' ] = $baseName ; $request = \" $this->seatable_url /api/v2.1/workspace/ $workspaceId /dtable/\" ; return $this -> restCurlClientEx -> put ( $request , $changes ); } /** * Copy a Base from an External Link * * @group User / Bases / Base Management * @link https://api.seatable.io/#21b89497-80a0-4b35-9543-5d584e92fa80 * * @param string $link * @param int $destinationWorkspaceId * @return object */ public function copyBaseExternalLink ( string $link , int $destinationWorkspaceId ) : object { $request = \" $this->seatable_url /api/v2.1/dtable-external-link/dtable-copy/\" ; $f = [ 'link' => $link , 'dst_workspace_id' => $destinationWorkspaceId , ]; return $this -> restCurlClientEx -> post ( $request , $f ); } /** * Get Base Access Token via API Token * * @group Authentication / Base Access Token * @link https://api.seatable.io/#3b782fd2-6091-4871-acc7-2725bfc7e067 * * @param string $apiToken * @return object */ public function getBaseAppAccessToken ( string $apiToken ) : object { $request = $this -> seatable_url . '/api/v2.1/dtable/app-access-token/' ; $appAccessToken = $this -> restCurlClientEx -> get ( $request , [], $apiToken ); $this -> restCurlClientEx -> access_token = $appAccessToken -> access_token ; $this -> dtable_uuid = $appAccessToken -> dtable_uuid ; return $appAccessToken ; } /** * Get Base File Download Link via API Token * * @group Authentication / Base API Token * @link https://api.seatable.io/#f1bf0c82-a948-483c-8007-7e4b50d06bbf * * @param string $path * @param string $apiToken * @return object{download_link: string} */ public function getBaseAppFileDownloadLink ( string $path , string $apiToken ) : object { $path = Util :: urlToPath ( $this -> seatable_url , $path ) ?? $path ; $request = $this -> seatable_url . '/api/v2.1/dtable/app-download-link/?path=' . urlencode ( $path ); return $this -> restCurlClientEx -> get ( $request , [], $apiToken ); } /** * Get Base File Upload Link via API Token * * @group Base Operations / Files/Images * @link https://api.seatable.io/#5e86ebc8-1df6-4cef-acb7-eaa6ccd173c6 * * @param string $apiToken * @return object */ public function getBaseAppFileUploadLink ( string $apiToken ) : object { $request = $this -> seatable_url . '/api/v2.1/dtable/app-upload-link/' ; return $this -> restCurlClientEx -> get ( $request , [], $apiToken ); } /** * Get Base Access Token via Auth Token * * @group Authentication / Base Access Token * @link https://api.seatable.io/#7b251436-a4f1-4793-bd03-678caa32c29d * * @param int $workspaceId * @param string $baseName * @return object */ public function getBaseAccessToken ( int $workspaceId , string $baseName ) : object { $request = \" $this->seatable_url /api/v2.1/workspace/ $workspaceId /dtable/\" . rawurlencode ( $baseName ) . '/access-token/' ; $accessToken = $this -> restCurlClientEx -> get ( $request ); $this -> restCurlClientEx -> access_token = $accessToken -> access_token ; $this -> dtable_uuid = $accessToken -> dtable_uuid ; return $accessToken ; } /** * Query with SQL * * @group Base Operations / Archives / Base Query * @link https://api.seatable.io/#440e7112-8076-463b-b3f2-cf654ab8e7d1 * * @param string $sql * @param bool $convertKeys * @return object */ public function querySql ( string $sql , bool $convertKeys = false ) : object { $request = \" $this->seatable_url /dtable-db/api/v1/query/ $this->dtable_uuid /\" ; $definition = [ 'sql' => $sql , 'convert_keys' => $convertKeys , ]; $buffer = json_encode ( $definition ); if ( ! is_string ( $buffer )) { throw new \\UnexpectedValueException ( 'Definition failed to encode (JSON)' ); } return $this -> restCurlClientEx -> post ( $request , $buffer ); } /** * Backquote SQL table name * * @group Base Operations / Archives / Base Query * * @link https://seatable.github.io/seatable-scripts/python/sql/#use-formulas-in-sql-query * * @param string $tableName * @return string */ public function querySqlQuoteTableName ( string $tableName ) : string { return Util :: quoteSqlTableName ( $tableName ); } /** * List Rows * * @group Base Operations / Rows * @link https://api.seatable.io/#c7caa77d-6214-4ca1-bb91-5c1d3d19c52d * * @param string $tableName * @param string|null $viewName * @param bool $convertLinkId * @param string|null $orderBy * @param bool $direction false: ascending, true: descending * @param int $start * @param int $limit * @return object */ public function listRows ( string $tableName , string $viewName = null , bool $convertLinkId = false , string $orderBy = null , bool $direction = false , int $start = 0 , int $limit = 1000 ) : object { $request = \" $this->seatable_url /dtable-server/api/v1/dtables/ $this->dtable_uuid /rows/\" ; $request .= '?' . http_build_query ([ 'table_name' => $tableName , 'view_name' => $viewName , 'convert_link_id' => $convertLinkId ? 'true' : 'false' , 'order_by' => $orderBy , 'direction' => $direction ? 'desc' : 'asc' , 'start' => $start , 'limit' => $limit , ]); return $this -> restCurlClientEx -> get ( $request ); } /** * Append Row * * @group Base Operations / Rows * @link https://api.seatable.io/#28fa1ae4-3b6d-43c7-99ea-79a458cee213 * * @param string $tableName * @param array $row * @return object */ public function appendRow ( string $tableName , array $row ) : object { $request = \" $this->seatable_url /dtable-server/api/v1/dtables/ $this->dtable_uuid /rows/\" ; $definition = [ 'table_name' => $tableName , 'row' => $row , ]; $buffer = json_encode ( $definition ); if ( ! is_string ( $buffer )) { throw new \\UnexpectedValueException ( 'Definition failed to encode (JSON)' ); } return $this -> restCurlClientEx -> post ( $request , $buffer ); } /** * Update Row * * @group Base Operations / Rows * @link https://api.seatable.io/#8397f141-4df6-438e-858a-1ccc112cda75 * * @param string $tableName * @param array $row * @param string $rowId * @return object */ public function updateRow ( string $tableName , array $row , string $rowId ) : object { $request = \" $this->seatable_url /dtable-server/api/v1/dtables/ $this->dtable_uuid /rows/\" ; $definition = [ 'table_name' => $tableName , 'row' => $row , 'row_id' => $rowId , ]; $buffer = json_encode ( $definition ); if ( ! is_string ( $buffer )) { throw new \\UnexpectedValueException ( 'Definition failed to encode (JSON)' ); } return $this -> restCurlClientEx -> put ( $request , $buffer ); } /** * Link Row * * @group Base Operations / Links * @link https://api.seatable.io/#ff463ec1-140a-4190-b73f-dc41af561b48 * * @param string $tableName * @param string $otherTableName * @param string $linkId * @param string $tableRowId * @param string $otherTableRowId * @return object */ public function linkRow ( string $tableName , string $otherTableName , string $linkId , string $tableRowId , string $otherTableRowId ) : object { $request = \" $this->seatable_url /dtable-server/api/v1/dtables/ $this->dtable_uuid /links/\" ; $definition = [ 'table_name' => $tableName , 'other_table_name' => $otherTableName , 'link_id' => $linkId , 'table_row_id' => $tableRowId , 'other_table_row_id' => $otherTableRowId , ]; $buffer = json_encode ( $definition ); if ( ! is_string ( $buffer )) { throw new \\UnexpectedValueException ( 'Definition failed to encode (JSON)' ); } return $this -> restCurlClientEx -> post ( $request , $buffer ); } /** * Get Base Metadata * * @group Base Operations / Bases Infos * @link https://api.seatable.io/#0ba333a2-7450-4b03-8efb-6c49d6b47a0e * * @return object */ public function getBaseMetadata () : object { $request = $this -> seatable_url . '/dtable-server/api/v1/dtables/' . $this -> dtable_uuid . '/metadata/' ; return $this -> restCurlClientEx -> get ( $request ); } /** * List of Daily Active Users * * @group System Admin / Statistics * @link https://api.seatable.io/#a3590cbf-1ec4-4148-8aa4-308d10a8437e * * @param string $date * @param int $page * @param int $perPage * @return object */ public function sysAdminListDailyActiveUsers ( string $date = '2020-08-12 00:00:00' , int $page = 1 , int $perPage = 25 ) : object { $request = \" $this->seatable_url /api/v2.1/admin/daily-active-users/?date=\" . urlencode ( $date ) . \"&per_page= $perPage &page= $page \" ; return $this -> restCurlClientEx -> get ( $request ); } /** * List Teams (Organizations) * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#3eec0a21-4322-46b8-936d-d003ef540852 * * @param int $page * @param int $perPage * @return object */ public function sysAdminListTeams ( int $page = 1 , int $perPage = 25 ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/?per_page= $perPage &page= $page \" ; return $this -> restCurlClientEx -> get ( $request ); } /** * Add Team (Organization) * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#4dc845bd-9eb2-4ab5-a57f-8d1bdebd62bf * * @param string $name of team (organization) * @param string $adminEmail * @param string $adminName * @param string $password * @param int $maxUser * @return object */ public function sysAdminAddTeam ( string $name , string $adminEmail , string $adminName , string $password , int $maxUser ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/\" ; $org = [ 'org_name' => $name , 'admin_email' => $adminEmail , 'admin_name' => $adminName , 'password' => $password , 'max_user_number' => $maxUser , ]; return $this -> restCurlClientEx -> post ( $request , $org ); } /** * Delete Team (Organization) * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#424afa58-ad74-444d-8007-8bfeee79ff87 * * @param int $id * @return object */ public function sysAdminDeleteTeam ( int $id ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /\" ; return $this -> restCurlClientEx -> delete ( $request ); } /** * Update Team (Organization) * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#e9f4b4cd-e234-42c2-9159-b05ff33c23ca * * @param int $id * @param array $changes possible changes are: role, max_user_number, org_name, row_limit, asset_quota * @return object */ public function sysAdminUpdateTeam ( int $id , array $changes = []) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /\" ; return $this -> restCurlClientEx -> put ( $request , $changes ); } /** * List Team Members * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#f5dad123-02a7-4b50-a9a0-464cebd7c922 * * @param int $id * @param int $page * @param int $perPage * @param bool $isStaff defaults to false which includes all users (incl. team admins) * @return object */ public function sysAdminListTeamUsers ( int $id , int $page = 1 , int $perPage = 25 , bool $isStaff = false ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /users/?per_page= $perPage &page= $page &is_staff=\" . ( $isStaff ? 'true' : 'false' ); return $this -> restCurlClientEx -> get ( $request ); } /** * Add a Team User * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#ee0150d3-d5a4-43e4-9d5f-0cb5f207f168 * * @param int $id * @param string $email * @param string $pass * @param string|null $name * @return object */ public function sysAdminAddTeamUser ( int $id , string $email , string $pass , string $name = null ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /users/\" ; null === $name && $name = ( string ) strtok ( $email , '@' ); $user = [ 'email' => $email , 'name' => $name , 'password' => $pass , ]; return $this -> restCurlClientEx -> post ( $request , $user ); } /** * Delete a Team User * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#e7bd43e5-ef48-4dd1-85b1-be5118ca4dc4 * * @param int $id Team * @param string $email User * @return object */ public function sysAdminDeleteTeamUser ( int $id , string $email ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /users/\" . rawurlencode ( $email ) . '/' ; return $this -> restCurlClientEx -> delete ( $request ); } /** * List Team Groups * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#42e907af-577c-49c0-8cbf-28d03c65c01c * * @param int $id * @return object */ public function sysAdminListTeamGroups ( int $id ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /groups/\" ; return $this -> restCurlClientEx -> get ( $request ); } /** * List Team Bases * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#b1fe997d-f5e5-48fc-ab1b-0b5b4e9df6ab * * @param int $id * @param int $page * @param int $perPage * @return object */ public function sysAdminListTeamBases ( int $id , int $page = 1 , int $perPage = 25 ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /dtables/?per_page= $perPage &page= $page \" ; return $this -> restCurlClientEx -> get ( $request ); } /** * Get User's Common Info * * @group User / Account * @link https://api.seatable.io/#c78b6b44-b238-46a6-a9c5-c70aec1faa71 * * @param string $email * @return object */ public function getCommonInfo ( string $email ) : object { $request = \" $this->seatable_url /api/v2.1/user-common-info/\" . rawurlencode ( $email ) . '/' ; return $this -> restCurlClientEx -> get ( $request ); } /** * Get a Team * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#bf22f375-4eba-4fe4-ba09-fe8082dc5fd6 * * @param int $id * @return object */ public function sysAdminGetTeam ( int $id ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /\" ; return $this -> restCurlClientEx -> get ( $request ); } /** * Add System Notification to User * * @group System Admin / System Notifications * @link https://api.seatable.io/#65927c78-d524-456e-aaa8-674019b5bd98 * * @param string $msg * @param string $username * @return object */ public function sysAdminAddSystemNotificationToUser ( string $msg , string $username ) : object { $request = \" $this->seatable_url /api/v2.1/admin/sys-user-notifications/\" ; $body = [ 'msg' => $msg , 'username' => $username , ]; return $this -> restCurlClientEx -> post ( $request , $body ); } /** * List System Notifications * * @group System Admin / System Notifications * @link https://api.seatable.io/#dc65d982-2c19-4be7-85e2-3c1a4f94a8a3 * * @param int $page * @param int $perPage * @return object */ public function listAllSystemNotifications ( int $page = 1 , int $perPage = 25 ) : object { $request = \" $this->seatable_url /api/v2.1/admin/sys-user-notifications/?per_page= $perPage &page= $page \" ; return $this -> restCurlClientEx -> get ( $request ); } /** * Import Base from *.dtable or *.csv File * * @group User / Bases / Base Management * @link https://api.seatable.io/#3a888a1e-833f-407d-8586-0a5e1cdfa851 */ public function importBaseFromFile ( int $workspaceId , string $path ) : object { $request = \" $this->seatable_url /api/v2.1/workspace/ $workspaceId /import-dtable/\" ; $form = [ 'dtable' => $this -> restCurlClientEx -> curlFile ( $path )]; return $this -> restCurlClientEx -> post ( $request , $form ); } /** * Upload/Update User Avatar * * @group User / Account * @link https://api.seatable.io/#137dc28b-0f0d-4f18-8e33-993946811ec6 * * @param string $path to image file * @return object */ public function updateAvatar ( string $path ) : object { $request = $this -> seatable_url . '/api/v2.1/user-avatar/' ; $curlFile = $this -> restCurlClientEx -> curlFile ( $path ); return $this -> restCurlClientEx -> post ( $request , [ 'avatar' => $curlFile ]); } /** * List Groups (in your Team) * * @group Team Admin / Groups * @link https://api.seatable.io/#2f842f81-4723-4a6d-b96c-38f31cbbc546 */ public function listGroups ( int $orgId , int $page = 1 , int $perPage = 2 ) : object { $request = \" $this->seatable_url /api/v2.1/org/ $orgId /admin/groups/?page= $page &per_page= $perPage \" ; return $this -> restCurlClientEx -> get ( $request ); } /** * Add Group * * @group Team Admin / Groups * @link https://api.seatable.io/#4fd4ab0b-1ea8-413a-bb50-bd8a982f1f54 * * @param int $id * @param string $groupName * @param string $groupOwner * @return object */ public function teamAdminAddGroup ( int $id , string $groupName , string $groupOwner ) : object { $request = \" $this->seatable_url /api/v2.1/org/ $id /admin/groups/\" ; return $this -> restCurlClientEx -> post ( $request , [ 'group_name' => $groupName , 'group_owner' => $groupOwner , ]); } /** * Batch Add Members to Group * * @group Team Admin / Group Members * @link https://api.seatable.io/#277fa732-b785-4933-859b-1f36487ade96 * * @param int $id * @param int $groupId * @param string|string[] $email * @param string ...$emails * @return object */ public function teamAdminAddGroupMember ( int $id , int $groupId , string $email , string ... $emails ) : object { $request = \" $this->seatable_url /api/v2.1/org/ $id /admin/groups/ $groupId /members/\" ; array_unshift ( $emails , $email ); $buffer = array_reduce ( $emails , static function ( $carry , $item ) { if ( is_string ( $item ) && strlen ( $item ) > 3 ) { '' === $carry || $carry .= '&' ; $carry .= 'email=' . urlencode ( $item ); } return $carry ; }, '' ); $httpOptions = [ CURLOPT_HTTPHEADER => [ 'Authorization: Token ' . $this -> restCurlClientEx -> seatable_token , 'Content-Type: application/x-www-form-urlencoded' ]]; return $this -> restCurlClientEx -> post ( $request , $buffer , $httpOptions ); } /** * Change a Group Members' Role * * @group Team Admin / Group Members * @link https://api.seatable.io/#6de52f15-e574-4b92-b5f9-255a5efa4ef8 */ public function teamAdminUpdateGroupMember ( int $orgId , int $groupId , string $email , bool $isAdmin ) : object { $request = \" $this->seatable_url /api/v2.1/org/ $orgId /admin/groups/ $groupId /members/\" . rawurlencode ( $email ) . '/' ; return $this -> restCurlClientEx -> put ( $request , [ 'is_admin' => json_encode ( $isAdmin ), ]); } /** * Remove A Member from A Group * * @group Team Admin / Group Members * @link https://api.seatable.io/#95df40eb-4670-453d-a6a3-030c4a8549d5 */ public function deleteGroupMember ( int $orgId , int $groupId , string $email ) : object { $request = \" $this->seatable_url /api/v2.1/org/ $orgId /admin/groups/ $groupId /members/\" . rawurlencode ( $email ) . '/' ; return $this -> restCurlClientEx -> delete ( $request ); } /** * Create A Base API Token * * @group Authentication / Base API Token * @ref [dTable api] dtable-web-api.js:438 addTableAPIToken * @link https://api.seatable.io/#1866e49a-1eb4-4865-9fef-fc28b111c787 * * @param int $workspaceId * @param string $baseName * @param string $appName * @param string $permission * @return object */ public function createBaseApiToken ( int $workspaceId , string $baseName , string $appName , string $permission = \"r\" ) : object { $request = $this -> seatable_url . '/api/v2.1/workspace/' . $workspaceId . '/dtable/' . rawurlencode ( $baseName ) . '/api-tokens/' ; return $this -> restCurlClientEx -> post ( $request , [ 'app_name' => $appName , 'permission' => $permission , ]); } /** * Add A Plugin * * @group System Admin / Plugins * @link https://api.seatable.io/#e4fb06bd-17af-4dc4-9098-221c293cf9e0 * * @param string $path * @return object */ public function addPlugin ( string $path ) : object { $request = $this -> seatable_url . '/api/v2.1/admin/dtable-system-plugins/' ; $curlFile = new \\CURLFile ( realpath ( $path )); return $this -> restCurlClientEx -> post ( $request , [ 'plugin' => $curlFile , ]); } /** * Delete All Notifications * * @group User / Notification * @link https://api.seatable.io/#e7803745-e90d-49c7-b41e-790a317b9860 * * @return object */ public function deleteAllNotifications () : object { $request = $this -> seatable_url . '/api/v2.1/notifications/' ; return $this -> restCurlClientEx -> delete ( $request ); } }","title":"SeaTableApi (PHP)"},{"location":"doc/seatableapi-php/#seatableapi-php","text":"<?php namespace SeaTable\\SeaTableApi ; use SeaTable\\SeaTableApi\\Internal\\ApiOptions ; use SeaTable\\SeaTableApi\\Internal\\RestCurlClientEx ; use SeaTable\\SeaTableApi\\Internal\\RestCurlClientExInterface ; use SeaTable\\SeaTableApi\\Internal\\Util ; /** * SeaTable API - PHP class wrapper * * @author <cdb@seatable.io> (thanks for the inspiration by <ben@netcap.fr>) * @copyright 2020, 2021 SeaTable GmbH * @license APACHE-2.0 * * SeaTable - Next-generation online spreadsheet <https://seatable.io> * * SeaTable API <https://api.seatable.io/> (formerly: <https://docs.seatable.io/published/seatable-api/home.md>) */ class SeaTableApi { private $seatable_url ; # url of the SeaTable server private $dtable_uuid ; /** * @var RestCurlClientExInterface */ private $restCurlClientEx ; /** * Instantiate SeaTable class * * @param array{url: string, user: string, password: string, port?: int, base_api_token?: string, base_app_name?: string, api_token?: string} $options * @throws Exception */ public function __construct ( array $options = []) { /* * Input validation */ $apiOptions = ApiOptions :: createFromArray ( $options ); $this -> seatable_url = $apiOptions -> getUrl (); $this -> restCurlClientEx = new RestCurlClientEx ( $apiOptions -> getHttpOptions ()); $this -> authenticate ( $apiOptions ); } /** * authenticate based on options * * @param ApiOptions $options * @return void */ private function authenticate ( ApiOptions $options ) : void { if ( $options -> authIsUser ()) { // $this->restCurlClientEx->seatable_token // 2.1 'Authorization: Token ' . $this->seatable_token $this -> getAuthToken ( $options -> getUser (), $options -> getPassword ()); return ; } if ( $options -> authIsApi ()) { // $this->restCurlClientEx->access_token = $o->access_token; // api/v1/dtables 'Authorization: Token ' . $this->access_token $accessToken = $this -> getBaseAppAccessToken ( $options -> getBaseApiToken ()); if ( ( null !== $expectedAppName = $options -> getBaseAppName ()) && $accessToken -> app_name !== $expectedAppName ) { throw new Exception ( sprintf ( 'SeaTable invalid application name: \"%s\"' , $expectedAppName )); } return ; } if ( $options -> authIsToken ()) { $this -> restCurlClientEx -> seatable_token = $options -> getAuthToken (); return ; } throw new Exception ( 'SeaTable found no authentication option.' ); } /** * Obtain SeaTable Auth Token * * @param string $username * @param string $password * @return void */ private function getAuthToken ( string $username , string $password ) : void { $data = $this -> restCurlClientEx -> post ( $this -> seatable_url . '/api2/auth-token/' , [ 'username' => $username , 'password' => $password , ]); $this -> restCurlClientEx -> seatable_token = ( string ) $data -> token ; } /** * Ping Server (with authentication) * * @group Authentication / Ping Server * @link https://api.seatable.io/#5a2261c2-4e87-44fa-8b28-0145759de970 * * @return string \"pong\" if auth token is correct */ public function ping () : string { $request = $this -> seatable_url . '/api2/auth/ping/' ; return $this -> restCurlClientEx -> get ( $request ); } /** * Get Account Info * * @group User / Account * @link https://api.seatable.io/#66ce3ca0-edc5-486b-8877-91157bb71d7d */ public function getAccountInfo () : object { $request = \" $this->seatable_url /api2/account/info/\" ; return $this -> restCurlClientEx -> get ( $request ); } /** * List All Users * * @group System Admin / Users * @link https://api.seatable.io/#883d8faf-1f2a-4033-8904-0171fece890c * * @param int $page Select Page the users shown from (default 1) * @param int $perPage Number of users that should be shown (default = 25) * @return object */ public function sysAdminListUsers ( int $page = 1 , int $perPage = 25 ) : object { $request = \" $this->seatable_url /api/v2.1/admin/users/?per_page= $perPage &page= $page \" ; return $this -> restCurlClientEx -> get ( $request ); } /** * Add New User * * @group System Admin / Users * @link https://api.seatable.io/#922eb788-ebad-47b1-af34-e1aec536182e * * @param string $email * @param string $name * @param string $password * @param string $role * @return object with user account details */ public function sysAdminAddUser ( string $email , string $name , string $password , string $role = 'default' ) : object { $request = \" $this->seatable_url /api/v2.1/admin/users/\" ; $form = [ 'email' => $email , 'name' => $name , 'password' => $password , 'role' => $role , ]; return $this -> restCurlClientEx -> post ( $request , $form ); } /** * Search a User * * @group System Admin / Users * @link https://api.seatable.io/#95fcb3f1-5496-4113-a078-22972c19e583 * * @param string $query * @return object */ public function sysAdminSearchUser ( string $query ) : object { $request = \" $this->seatable_url /api/v2.1/admin/search-user/?query=\" . urlencode ( $query ); return $this -> restCurlClientEx -> get ( $request ); } /** * Update User * * @group System Admin / Users * @link https://api.seatable.io/#8fcb4411-4007-495a-b3f3-c3014c4f7ace * * @param string $email * @param array $changes role, ... * @return object */ public function sysAdminUpdateUser ( string $email , array $changes = []) : object { $request = \" $this->seatable_url /api/v2.1/admin/users/\" . rawurlencode ( $email ) . '/' ; return $this -> restCurlClientEx -> put ( $request , $changes ); } /** * Delete User * * @group System Admin / Users * @link https://api.seatable.io/#17bdf15e-fbb8-4fa9-b8ef-43841fc6c40d * * @param string $email * @return array|object|string|null */ public function sysAdminDeleteUser ( string $email ) : object { $request = \" $this->seatable_url /api/v2.1/admin/users/\" . rawurlencode ( $email ) . '/' ; return $this -> restCurlClientEx -> delete ( $request ); } /** * List Workspaces * * @group User / Workspaces * @link https://api.seatable.io/#bb823388-ccfb-4dc2-bb01-5eb81acb6683 * * @return object */ public function listWorkspaces () : object { $request = \" $this->seatable_url /api/v2.1/workspaces/\" ; return $this -> restCurlClientEx -> get ( $request ); } /** * Update a Base * * Update a base's name, icon and icon color. * * @group User / Bases / Base Management * @link https://api.seatable.io/#55d6c818-3247-4b89-b169-9de2872a023f * * @param int $workspaceId * @param string $baseName * @param array $changes * @return object */ public function updateBase ( int $workspaceId , string $baseName , array $changes = []) : object { $changes [ 'name' ] = $baseName ; $request = \" $this->seatable_url /api/v2.1/workspace/ $workspaceId /dtable/\" ; return $this -> restCurlClientEx -> put ( $request , $changes ); } /** * Copy a Base from an External Link * * @group User / Bases / Base Management * @link https://api.seatable.io/#21b89497-80a0-4b35-9543-5d584e92fa80 * * @param string $link * @param int $destinationWorkspaceId * @return object */ public function copyBaseExternalLink ( string $link , int $destinationWorkspaceId ) : object { $request = \" $this->seatable_url /api/v2.1/dtable-external-link/dtable-copy/\" ; $f = [ 'link' => $link , 'dst_workspace_id' => $destinationWorkspaceId , ]; return $this -> restCurlClientEx -> post ( $request , $f ); } /** * Get Base Access Token via API Token * * @group Authentication / Base Access Token * @link https://api.seatable.io/#3b782fd2-6091-4871-acc7-2725bfc7e067 * * @param string $apiToken * @return object */ public function getBaseAppAccessToken ( string $apiToken ) : object { $request = $this -> seatable_url . '/api/v2.1/dtable/app-access-token/' ; $appAccessToken = $this -> restCurlClientEx -> get ( $request , [], $apiToken ); $this -> restCurlClientEx -> access_token = $appAccessToken -> access_token ; $this -> dtable_uuid = $appAccessToken -> dtable_uuid ; return $appAccessToken ; } /** * Get Base File Download Link via API Token * * @group Authentication / Base API Token * @link https://api.seatable.io/#f1bf0c82-a948-483c-8007-7e4b50d06bbf * * @param string $path * @param string $apiToken * @return object{download_link: string} */ public function getBaseAppFileDownloadLink ( string $path , string $apiToken ) : object { $path = Util :: urlToPath ( $this -> seatable_url , $path ) ?? $path ; $request = $this -> seatable_url . '/api/v2.1/dtable/app-download-link/?path=' . urlencode ( $path ); return $this -> restCurlClientEx -> get ( $request , [], $apiToken ); } /** * Get Base File Upload Link via API Token * * @group Base Operations / Files/Images * @link https://api.seatable.io/#5e86ebc8-1df6-4cef-acb7-eaa6ccd173c6 * * @param string $apiToken * @return object */ public function getBaseAppFileUploadLink ( string $apiToken ) : object { $request = $this -> seatable_url . '/api/v2.1/dtable/app-upload-link/' ; return $this -> restCurlClientEx -> get ( $request , [], $apiToken ); } /** * Get Base Access Token via Auth Token * * @group Authentication / Base Access Token * @link https://api.seatable.io/#7b251436-a4f1-4793-bd03-678caa32c29d * * @param int $workspaceId * @param string $baseName * @return object */ public function getBaseAccessToken ( int $workspaceId , string $baseName ) : object { $request = \" $this->seatable_url /api/v2.1/workspace/ $workspaceId /dtable/\" . rawurlencode ( $baseName ) . '/access-token/' ; $accessToken = $this -> restCurlClientEx -> get ( $request ); $this -> restCurlClientEx -> access_token = $accessToken -> access_token ; $this -> dtable_uuid = $accessToken -> dtable_uuid ; return $accessToken ; } /** * Query with SQL * * @group Base Operations / Archives / Base Query * @link https://api.seatable.io/#440e7112-8076-463b-b3f2-cf654ab8e7d1 * * @param string $sql * @param bool $convertKeys * @return object */ public function querySql ( string $sql , bool $convertKeys = false ) : object { $request = \" $this->seatable_url /dtable-db/api/v1/query/ $this->dtable_uuid /\" ; $definition = [ 'sql' => $sql , 'convert_keys' => $convertKeys , ]; $buffer = json_encode ( $definition ); if ( ! is_string ( $buffer )) { throw new \\UnexpectedValueException ( 'Definition failed to encode (JSON)' ); } return $this -> restCurlClientEx -> post ( $request , $buffer ); } /** * Backquote SQL table name * * @group Base Operations / Archives / Base Query * * @link https://seatable.github.io/seatable-scripts/python/sql/#use-formulas-in-sql-query * * @param string $tableName * @return string */ public function querySqlQuoteTableName ( string $tableName ) : string { return Util :: quoteSqlTableName ( $tableName ); } /** * List Rows * * @group Base Operations / Rows * @link https://api.seatable.io/#c7caa77d-6214-4ca1-bb91-5c1d3d19c52d * * @param string $tableName * @param string|null $viewName * @param bool $convertLinkId * @param string|null $orderBy * @param bool $direction false: ascending, true: descending * @param int $start * @param int $limit * @return object */ public function listRows ( string $tableName , string $viewName = null , bool $convertLinkId = false , string $orderBy = null , bool $direction = false , int $start = 0 , int $limit = 1000 ) : object { $request = \" $this->seatable_url /dtable-server/api/v1/dtables/ $this->dtable_uuid /rows/\" ; $request .= '?' . http_build_query ([ 'table_name' => $tableName , 'view_name' => $viewName , 'convert_link_id' => $convertLinkId ? 'true' : 'false' , 'order_by' => $orderBy , 'direction' => $direction ? 'desc' : 'asc' , 'start' => $start , 'limit' => $limit , ]); return $this -> restCurlClientEx -> get ( $request ); } /** * Append Row * * @group Base Operations / Rows * @link https://api.seatable.io/#28fa1ae4-3b6d-43c7-99ea-79a458cee213 * * @param string $tableName * @param array $row * @return object */ public function appendRow ( string $tableName , array $row ) : object { $request = \" $this->seatable_url /dtable-server/api/v1/dtables/ $this->dtable_uuid /rows/\" ; $definition = [ 'table_name' => $tableName , 'row' => $row , ]; $buffer = json_encode ( $definition ); if ( ! is_string ( $buffer )) { throw new \\UnexpectedValueException ( 'Definition failed to encode (JSON)' ); } return $this -> restCurlClientEx -> post ( $request , $buffer ); } /** * Update Row * * @group Base Operations / Rows * @link https://api.seatable.io/#8397f141-4df6-438e-858a-1ccc112cda75 * * @param string $tableName * @param array $row * @param string $rowId * @return object */ public function updateRow ( string $tableName , array $row , string $rowId ) : object { $request = \" $this->seatable_url /dtable-server/api/v1/dtables/ $this->dtable_uuid /rows/\" ; $definition = [ 'table_name' => $tableName , 'row' => $row , 'row_id' => $rowId , ]; $buffer = json_encode ( $definition ); if ( ! is_string ( $buffer )) { throw new \\UnexpectedValueException ( 'Definition failed to encode (JSON)' ); } return $this -> restCurlClientEx -> put ( $request , $buffer ); } /** * Link Row * * @group Base Operations / Links * @link https://api.seatable.io/#ff463ec1-140a-4190-b73f-dc41af561b48 * * @param string $tableName * @param string $otherTableName * @param string $linkId * @param string $tableRowId * @param string $otherTableRowId * @return object */ public function linkRow ( string $tableName , string $otherTableName , string $linkId , string $tableRowId , string $otherTableRowId ) : object { $request = \" $this->seatable_url /dtable-server/api/v1/dtables/ $this->dtable_uuid /links/\" ; $definition = [ 'table_name' => $tableName , 'other_table_name' => $otherTableName , 'link_id' => $linkId , 'table_row_id' => $tableRowId , 'other_table_row_id' => $otherTableRowId , ]; $buffer = json_encode ( $definition ); if ( ! is_string ( $buffer )) { throw new \\UnexpectedValueException ( 'Definition failed to encode (JSON)' ); } return $this -> restCurlClientEx -> post ( $request , $buffer ); } /** * Get Base Metadata * * @group Base Operations / Bases Infos * @link https://api.seatable.io/#0ba333a2-7450-4b03-8efb-6c49d6b47a0e * * @return object */ public function getBaseMetadata () : object { $request = $this -> seatable_url . '/dtable-server/api/v1/dtables/' . $this -> dtable_uuid . '/metadata/' ; return $this -> restCurlClientEx -> get ( $request ); } /** * List of Daily Active Users * * @group System Admin / Statistics * @link https://api.seatable.io/#a3590cbf-1ec4-4148-8aa4-308d10a8437e * * @param string $date * @param int $page * @param int $perPage * @return object */ public function sysAdminListDailyActiveUsers ( string $date = '2020-08-12 00:00:00' , int $page = 1 , int $perPage = 25 ) : object { $request = \" $this->seatable_url /api/v2.1/admin/daily-active-users/?date=\" . urlencode ( $date ) . \"&per_page= $perPage &page= $page \" ; return $this -> restCurlClientEx -> get ( $request ); } /** * List Teams (Organizations) * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#3eec0a21-4322-46b8-936d-d003ef540852 * * @param int $page * @param int $perPage * @return object */ public function sysAdminListTeams ( int $page = 1 , int $perPage = 25 ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/?per_page= $perPage &page= $page \" ; return $this -> restCurlClientEx -> get ( $request ); } /** * Add Team (Organization) * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#4dc845bd-9eb2-4ab5-a57f-8d1bdebd62bf * * @param string $name of team (organization) * @param string $adminEmail * @param string $adminName * @param string $password * @param int $maxUser * @return object */ public function sysAdminAddTeam ( string $name , string $adminEmail , string $adminName , string $password , int $maxUser ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/\" ; $org = [ 'org_name' => $name , 'admin_email' => $adminEmail , 'admin_name' => $adminName , 'password' => $password , 'max_user_number' => $maxUser , ]; return $this -> restCurlClientEx -> post ( $request , $org ); } /** * Delete Team (Organization) * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#424afa58-ad74-444d-8007-8bfeee79ff87 * * @param int $id * @return object */ public function sysAdminDeleteTeam ( int $id ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /\" ; return $this -> restCurlClientEx -> delete ( $request ); } /** * Update Team (Organization) * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#e9f4b4cd-e234-42c2-9159-b05ff33c23ca * * @param int $id * @param array $changes possible changes are: role, max_user_number, org_name, row_limit, asset_quota * @return object */ public function sysAdminUpdateTeam ( int $id , array $changes = []) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /\" ; return $this -> restCurlClientEx -> put ( $request , $changes ); } /** * List Team Members * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#f5dad123-02a7-4b50-a9a0-464cebd7c922 * * @param int $id * @param int $page * @param int $perPage * @param bool $isStaff defaults to false which includes all users (incl. team admins) * @return object */ public function sysAdminListTeamUsers ( int $id , int $page = 1 , int $perPage = 25 , bool $isStaff = false ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /users/?per_page= $perPage &page= $page &is_staff=\" . ( $isStaff ? 'true' : 'false' ); return $this -> restCurlClientEx -> get ( $request ); } /** * Add a Team User * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#ee0150d3-d5a4-43e4-9d5f-0cb5f207f168 * * @param int $id * @param string $email * @param string $pass * @param string|null $name * @return object */ public function sysAdminAddTeamUser ( int $id , string $email , string $pass , string $name = null ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /users/\" ; null === $name && $name = ( string ) strtok ( $email , '@' ); $user = [ 'email' => $email , 'name' => $name , 'password' => $pass , ]; return $this -> restCurlClientEx -> post ( $request , $user ); } /** * Delete a Team User * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#e7bd43e5-ef48-4dd1-85b1-be5118ca4dc4 * * @param int $id Team * @param string $email User * @return object */ public function sysAdminDeleteTeamUser ( int $id , string $email ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /users/\" . rawurlencode ( $email ) . '/' ; return $this -> restCurlClientEx -> delete ( $request ); } /** * List Team Groups * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#42e907af-577c-49c0-8cbf-28d03c65c01c * * @param int $id * @return object */ public function sysAdminListTeamGroups ( int $id ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /groups/\" ; return $this -> restCurlClientEx -> get ( $request ); } /** * List Team Bases * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#b1fe997d-f5e5-48fc-ab1b-0b5b4e9df6ab * * @param int $id * @param int $page * @param int $perPage * @return object */ public function sysAdminListTeamBases ( int $id , int $page = 1 , int $perPage = 25 ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /dtables/?per_page= $perPage &page= $page \" ; return $this -> restCurlClientEx -> get ( $request ); } /** * Get User's Common Info * * @group User / Account * @link https://api.seatable.io/#c78b6b44-b238-46a6-a9c5-c70aec1faa71 * * @param string $email * @return object */ public function getCommonInfo ( string $email ) : object { $request = \" $this->seatable_url /api/v2.1/user-common-info/\" . rawurlencode ( $email ) . '/' ; return $this -> restCurlClientEx -> get ( $request ); } /** * Get a Team * * @group System Admin / Teams (organizations) * @link https://api.seatable.io/#bf22f375-4eba-4fe4-ba09-fe8082dc5fd6 * * @param int $id * @return object */ public function sysAdminGetTeam ( int $id ) : object { $request = \" $this->seatable_url /api/v2.1/admin/organizations/ $id /\" ; return $this -> restCurlClientEx -> get ( $request ); } /** * Add System Notification to User * * @group System Admin / System Notifications * @link https://api.seatable.io/#65927c78-d524-456e-aaa8-674019b5bd98 * * @param string $msg * @param string $username * @return object */ public function sysAdminAddSystemNotificationToUser ( string $msg , string $username ) : object { $request = \" $this->seatable_url /api/v2.1/admin/sys-user-notifications/\" ; $body = [ 'msg' => $msg , 'username' => $username , ]; return $this -> restCurlClientEx -> post ( $request , $body ); } /** * List System Notifications * * @group System Admin / System Notifications * @link https://api.seatable.io/#dc65d982-2c19-4be7-85e2-3c1a4f94a8a3 * * @param int $page * @param int $perPage * @return object */ public function listAllSystemNotifications ( int $page = 1 , int $perPage = 25 ) : object { $request = \" $this->seatable_url /api/v2.1/admin/sys-user-notifications/?per_page= $perPage &page= $page \" ; return $this -> restCurlClientEx -> get ( $request ); } /** * Import Base from *.dtable or *.csv File * * @group User / Bases / Base Management * @link https://api.seatable.io/#3a888a1e-833f-407d-8586-0a5e1cdfa851 */ public function importBaseFromFile ( int $workspaceId , string $path ) : object { $request = \" $this->seatable_url /api/v2.1/workspace/ $workspaceId /import-dtable/\" ; $form = [ 'dtable' => $this -> restCurlClientEx -> curlFile ( $path )]; return $this -> restCurlClientEx -> post ( $request , $form ); } /** * Upload/Update User Avatar * * @group User / Account * @link https://api.seatable.io/#137dc28b-0f0d-4f18-8e33-993946811ec6 * * @param string $path to image file * @return object */ public function updateAvatar ( string $path ) : object { $request = $this -> seatable_url . '/api/v2.1/user-avatar/' ; $curlFile = $this -> restCurlClientEx -> curlFile ( $path ); return $this -> restCurlClientEx -> post ( $request , [ 'avatar' => $curlFile ]); } /** * List Groups (in your Team) * * @group Team Admin / Groups * @link https://api.seatable.io/#2f842f81-4723-4a6d-b96c-38f31cbbc546 */ public function listGroups ( int $orgId , int $page = 1 , int $perPage = 2 ) : object { $request = \" $this->seatable_url /api/v2.1/org/ $orgId /admin/groups/?page= $page &per_page= $perPage \" ; return $this -> restCurlClientEx -> get ( $request ); } /** * Add Group * * @group Team Admin / Groups * @link https://api.seatable.io/#4fd4ab0b-1ea8-413a-bb50-bd8a982f1f54 * * @param int $id * @param string $groupName * @param string $groupOwner * @return object */ public function teamAdminAddGroup ( int $id , string $groupName , string $groupOwner ) : object { $request = \" $this->seatable_url /api/v2.1/org/ $id /admin/groups/\" ; return $this -> restCurlClientEx -> post ( $request , [ 'group_name' => $groupName , 'group_owner' => $groupOwner , ]); } /** * Batch Add Members to Group * * @group Team Admin / Group Members * @link https://api.seatable.io/#277fa732-b785-4933-859b-1f36487ade96 * * @param int $id * @param int $groupId * @param string|string[] $email * @param string ...$emails * @return object */ public function teamAdminAddGroupMember ( int $id , int $groupId , string $email , string ... $emails ) : object { $request = \" $this->seatable_url /api/v2.1/org/ $id /admin/groups/ $groupId /members/\" ; array_unshift ( $emails , $email ); $buffer = array_reduce ( $emails , static function ( $carry , $item ) { if ( is_string ( $item ) && strlen ( $item ) > 3 ) { '' === $carry || $carry .= '&' ; $carry .= 'email=' . urlencode ( $item ); } return $carry ; }, '' ); $httpOptions = [ CURLOPT_HTTPHEADER => [ 'Authorization: Token ' . $this -> restCurlClientEx -> seatable_token , 'Content-Type: application/x-www-form-urlencoded' ]]; return $this -> restCurlClientEx -> post ( $request , $buffer , $httpOptions ); } /** * Change a Group Members' Role * * @group Team Admin / Group Members * @link https://api.seatable.io/#6de52f15-e574-4b92-b5f9-255a5efa4ef8 */ public function teamAdminUpdateGroupMember ( int $orgId , int $groupId , string $email , bool $isAdmin ) : object { $request = \" $this->seatable_url /api/v2.1/org/ $orgId /admin/groups/ $groupId /members/\" . rawurlencode ( $email ) . '/' ; return $this -> restCurlClientEx -> put ( $request , [ 'is_admin' => json_encode ( $isAdmin ), ]); } /** * Remove A Member from A Group * * @group Team Admin / Group Members * @link https://api.seatable.io/#95df40eb-4670-453d-a6a3-030c4a8549d5 */ public function deleteGroupMember ( int $orgId , int $groupId , string $email ) : object { $request = \" $this->seatable_url /api/v2.1/org/ $orgId /admin/groups/ $groupId /members/\" . rawurlencode ( $email ) . '/' ; return $this -> restCurlClientEx -> delete ( $request ); } /** * Create A Base API Token * * @group Authentication / Base API Token * @ref [dTable api] dtable-web-api.js:438 addTableAPIToken * @link https://api.seatable.io/#1866e49a-1eb4-4865-9fef-fc28b111c787 * * @param int $workspaceId * @param string $baseName * @param string $appName * @param string $permission * @return object */ public function createBaseApiToken ( int $workspaceId , string $baseName , string $appName , string $permission = \"r\" ) : object { $request = $this -> seatable_url . '/api/v2.1/workspace/' . $workspaceId . '/dtable/' . rawurlencode ( $baseName ) . '/api-tokens/' ; return $this -> restCurlClientEx -> post ( $request , [ 'app_name' => $appName , 'permission' => $permission , ]); } /** * Add A Plugin * * @group System Admin / Plugins * @link https://api.seatable.io/#e4fb06bd-17af-4dc4-9098-221c293cf9e0 * * @param string $path * @return object */ public function addPlugin ( string $path ) : object { $request = $this -> seatable_url . '/api/v2.1/admin/dtable-system-plugins/' ; $curlFile = new \\CURLFile ( realpath ( $path )); return $this -> restCurlClientEx -> post ( $request , [ 'plugin' => $curlFile , ]); } /** * Delete All Notifications * * @group User / Notification * @link https://api.seatable.io/#e7803745-e90d-49c7-b41e-790a317b9860 * * @return object */ public function deleteAllNotifications () : object { $request = $this -> seatable_url . '/api/v2.1/notifications/' ; return $this -> restCurlClientEx -> delete ( $request ); } }","title":"SeaTableApi (PHP)"}]}